
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */

/*!

  \mainpage Jive reference manual

  This is the main index page of the Jive reference manual.

  The \b Jive library provides a collection of functions and data
  structures -- bundled into \em classes -- for transforming a PDE into a
  system of equations; for solving such a system of equations; for
  computing quantities derived from the solution and for graphically
  displaying them in two or three dimensions.

  Jive has been built on top of \b Jem, a C++ library that provides a
  portable interface to system-level services. Jem also provides a
  collection of general-purpose functions and classes, such as
  multi-dimensional arrays, that greatly simplify program
  development. Moreover, code that is build with components of Jem can
  easily be ported to all major operating systems and computer
  architectures.

  Classes and functions in Jem and Jive each live in their own namespace
  referred to as jem:: and jive::, respectively. Both libraries are
  further subdivided into packages, where each package bundles a set of
  Classes and functions that form a logical unit. The name of the package
  usually serves as a good indication of the purpose of the bundled
  objects. Also, each package introduces a new namespace with the name of
  that package. To demonstrate, if \c name is the name of the package in
  jem for example, than the full name of the namespace is \c
  jem::name.

  From here you can go to the documentation of the individual packages of
  Jem and Jive.

  The following packages are available in \b Jem:

  \li \subpage jem_base
  \li \subpage jem_gl
  \li \subpage jem_io
  \li \subpage jem_mp
  \li \subpage jem_mt
  \li \subpage jem_numeric
  \li \subpage jem_std
  \li \subpage jem_util
  \li \subpage jem_xml
  \li \subpage jem_xutil

  The following packages are available in \b Jive:

  \li \subpage jive_algebra
  \li \subpage jive_app
  \li \subpage jive_fem
  \li \subpage jive_femodel
  \li \subpage jive_geom
  \li \subpage jive_gl
  \li \subpage jive_graph
  \li \subpage jive_implict
  \li \subpage jive_mbody
  \li \subpage jive_mesh
  \li \subpage jive_model
  \li \subpage jive_mp
  \li \subpage jive_solver
  \li \subpage jive_util

*/

