
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( algebra )


//=======================================================================
//   class StdVectorSpace
//=======================================================================

/*!

  \brief Provides a straightforward implementation of the \c
  VectorSpace class.

  <code>\#include <jive/algebra/StdVectorSpace.h></code>

  The \c StdVectorSpace class is a subclass of the \c VectorSpace
  class that provides a straightforward implementation of the scalar
  product of two vectors. If \c x and \c y denote two vectors of the
  same size, then the scalar product \c s of these two vectors is
  computed as:

  \code
  s = 0.0;

  for ( i = 0; i < x.size(); i++ ) {
    s += x[i] * y[i];
  }
  \endcode

  Or, using an \ref ArrayExpressions "array expression":

  \code
  s = sum( x * y );
  \endcode

*/

class StdVectorSpace : public VectorSpace
{
 public:

//-----------------------------------------------------------------------
//   constructors
//-----------------------------------------------------------------------

/*!

  \brief Constructs a vector space with zero size.

  Constructs a vector space with zero size.

  \post <code>this->size() == 0</code>

*/

  StdVectorSpace ();


/*!

  \brief Constructs a vector space with a given size.

  Constructs a vector space with size \a size.

  \param size - the size of this vector space.

  \pre <code>size >= 0</code>

  \post <code>this->size() == size</code>

*/

  explicit StdVectorSpace ( int size );


//-----------------------------------------------------------------------
//   resize
//-----------------------------------------------------------------------
  
/*!

  \brief Sets the size of this vector space.

  Sets the size of this vector space to \a n. This function emits the
  event \c resizeEvent if the new size is different from the current
  size.

  \param n - the new size of this vector space.

  \pre <code>n >= 0</code>

  \post <code>this->size() == n</code>

*/

  void resize ( int n );
  

//-----------------------------------------------------------------------
//   product
//-----------------------------------------------------------------------
  
/*!

  \brief Computes the scalar product of two vectors.

  Returns the scalar product of the vectors \a x and \a y. The
  implementation provided by the \c StdVectorSpace class simply
  executes:

  \code
  return sum ( x * y );
  \endcode

  \return The scalar product of \a x and \a y.

*/

  virtual double product ( const Vector& x,
                           const Vector& y ) const;
  

//-----------------------------------------------------------------------
//   products
//-----------------------------------------------------------------------

/*!

  \brief Computes the scalar product of several vectors.

  Fills the vector \a a with the scalar products of the columns of the
  matrices \a x and \a y. The implementation provided by the \c
  StdVectorClass is given by:

  \code
  int i;

  for ( i = 0; i < x.size(1); i++ ) {
    a[i] = sum ( x( slice(ALL), i ) * y( slice(ALL), i ) );
  }
  \endcode

*/

  virtual void products ( const Vector& a,
                          const Matrix& x,
                          const Matrix& y ) const;


//-----------------------------------------------------------------------
//   project
//-----------------------------------------------------------------------

/*!
  
  \brief Computes the scalar product of a vector with several other
  vectors.

  Fills the vector \a a with the scalar products of the vector \a x
  with the columns of the matrix \a y. If the size of \a a is larger
  than \c n, with \c n equal to the number of columns in \a y, then \c
  a[n] is set to the scalar product of \a x with itself. The
  implementation of this function provided by the \c StdVectorSpace
  classes calls the function <code>\link DenseMatmul
  matmul\endlink</code> to compute the scalar products.

*/

  virtual void project ( const Vector& a,
                         const Vector& x,
                         const Matrix& y ) const;
  
  
//-----------------------------------------------------------------------
//   re-implemented functions
//-----------------------------------------------------------------------


  virtual int         size   () const;
  
  virtual void        print
                        ( const Vector& x ) const;

  
 protected:      
  
  virtual            ~StdVectorSpace();
  
};



JIVE_END_PACKAGE( algebra )
