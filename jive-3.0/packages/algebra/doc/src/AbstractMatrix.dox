
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( algebra )


//=======================================================================
//   class AbstractMatrix
//=======================================================================

/*!

  \brief Defines a common interface for different matrix types.

  <code>\#include <jive/algebra/AbstractMatrix.h></code>

  The \c AbstractMatrix class is the superclass of various matrix
  classes. It can be used to implement algorithms that need to execute
  a series of matrix-vector products and that do not care how the
  elements of a matrix are stored in memory.

  \sa \c VectorSpace.

*/

class AbstractMatrix : public jem::Object
{
 public:

//-----------------------------------------------------------------------
//   typedefs
//-----------------------------------------------------------------------

/*!

  \brief The type of this class.

  The \c Self type is a convenient synonym for \c AbstractMatrix.

*/

  typedef AbstractMatrix Self;


/*!

  \brief A type representing the shape of a matrix.

  The \c Shape type represents the shape of an \c AbstractMatrix. It
  is a synonym for \c jem::Tuple<int,2>.

*/

  typedef jem::Tuple<int,2>  Shape;


/*!
 
  \brief A vector type.

  The \c Vector type is just an alias for \c jive::util::Vector.

*/

  typedef util::Vector Vector;
  

//-----------------------------------------------------------------------
//   events
//-----------------------------------------------------------------------

/*!

  \brief Signals that the shape of this matrix has changed.

  The \c newShapeEvent is emitted whenever the shape of this matrix
  changes. The event argument is a reference to this \c AbstractMatrix
  object.

*/

  jem::util::Event<Self&> newShapeEvent;


/*!

  \brief Signals that the contents of this matrix have been modified.

  The \c newValuesEvent is emitted whenever the contents of this
  matrix have been modified. The event argument is a reference to this
  \c AbstractMatrix object.

  Note that the \c newValuesEvent does not have to be emitted when the
  \c newShapeEvent is emitted; if the the shape of a matrix has been
  modified, then, by definition, its contents have been modified too.

*/

  jem::util::Event<Self&> newValuesEvent;


//-----------------------------------------------------------------------
//   shape
//-----------------------------------------------------------------------

/*!

  \brief Returns the shape of this matrix.

  Returns the shape of this matrix. If \c s denotes the returned \c
  Shape object, then \c s[0] equals the number of rows and \c s[1]
  equals the number of columns in this matrix.

  \return The shape of this matrix.

*/

  Shape shape () const = 0;


//-----------------------------------------------------------------------
//   matmul
//-----------------------------------------------------------------------

/*!

  \brief Matrix-vector multiplication.

  Multiplies the vector \a rhs with this matrix and stores the result
  in the vector \a lhs. The sizes of the two vectors must be
  compatible with the shape of this matrix.

  \param lhs - the result vector.

  \param rhs - the vector to be multiplied by this matrix.

  \pre <code>
    lhs.size() == shape()[0] && <br>
    rhs.size() == shape()[1]
  </code>

*/

  virtual void matmul ( const Vector& lhs,
                        const Vector& rhs ) const = 0;


//-----------------------------------------------------------------------
//   isSquare
//-----------------------------------------------------------------------

/*!

  \brief Tests whether this matrix is square.

  Tests whether this matrix has a square shape.

  \return <code>( shape()[0] == shape()[1] )</code>

*/

  bool isSquare () const;


//-----------------------------------------------------------------------
//   other functions
//-----------------------------------------------------------------------


  static  jem::Class* getType  ();
  virtual jem::Class* getClass () const;

};



JIVE_END_PACKAGE( algebra )
