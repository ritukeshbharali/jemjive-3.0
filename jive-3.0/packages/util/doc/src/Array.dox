
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( util )


/*!
  
  \defgroup JiveUtilArrayTypes Array types
  
  \brief Exports a set of array types.

  <code>\#include <jive/util/Array.h></code>

  This header file exports a set of convenient typedefs, such as \c
  Vector and \c Matrix, that represent different types of
  one-dimensional and multi-dimensional arrays.

  Note that this file includes the header file
  <code><jem/base/array/Array.h></code>.

*/

//@{


//-----------------------------------------------------------------------
//   Vector
//-----------------------------------------------------------------------

/*!

  \brief A type representing a one-dimensional array of doubles.

  The \c Vector type represents a one-dimensional array of double
  precision numbers. It is an alias for \c jem::Array<double>.

*/


typedef ::jem::Array<double>  Vector;


//-----------------------------------------------------------------------
//   Matrix
//-----------------------------------------------------------------------

/*!

  \brief A type representing a two-dimensional array of doubles.

  The \c Matrix type represents a two-dimensional array of double
  precision numbers. It is an alias for \c jem::Array<double,2>.

*/

typedef ::jem::Array<double,2>  Matrix;


//-----------------------------------------------------------------------
//   Cubix
//-----------------------------------------------------------------------

/*!

  \brief A type representing a three-dimensional array of doubles.

  The \c Cubix type represents a three-dimensional array of double
  precision numbers. It is an alias for \c jem::Array<double,3>.

*/


typedef ::jem::Array<double,3>  Cubix;


//-----------------------------------------------------------------------
//   IntVector
//-----------------------------------------------------------------------

/*!

  \brief A type representing a one-dimensional array of integers.

  The \c IntVector type represents a one-dimensional array of
  integers. It is an alias for \c jem::Array<int>.

*/

typedef ::jem::Array<int>  IntVector;


//-----------------------------------------------------------------------
//   IntMatrix
//-----------------------------------------------------------------------

/*!

  \brief A type representing a two-dimensional array of integers.

  The \c IntMatrix type represents a two-dimensional array of
  integers. It is an alias for \c jem::Array<int,2>.

*/

typedef ::jem::Array<int,2>  IntMatrix;


//-----------------------------------------------------------------------
//   IntCubix
//-----------------------------------------------------------------------

/*!

  \brief A type representing a three-dimensional array of integers.

  The \c IntCubix type represents a three-dimensional array of integers.
  It is an alias for \c jem::Array<int,3>.

*/


typedef ::jem::Array<int,3>  IntCubix;


//-----------------------------------------------------------------------
//   BoolVector
//-----------------------------------------------------------------------

/*!

  \brief A type representing a one-dimensional array of booleans.

  The \c BoolVector type represents a one-dimensional array of
  boolean values. It is an alias for \c jem::Array<bool>.

*/

typedef ::jem::Array<bool>  BoolVector;


//-----------------------------------------------------------------------
//   BoolMatrix
//-----------------------------------------------------------------------

/*!

  \brief A type representing a two-dimensional array of booleans.

  The \c BoolMatrix type represents a two-dimensional array of
  boolean values. It is an alias for \c jem::Array<bool,2>.

*/

typedef ::jem::Array<bool,2>  BoolMatrix;


//-----------------------------------------------------------------------
//   StringVector
//-----------------------------------------------------------------------

/*!

  \brief A type representing a one-dimensional array of strings.

  The \c StringVector type represents a one-dimensional array of
  strings. It is an alias for \c jem::Array<jem::String>.

*/

typedef ::jem::Array<jem::String>  StringVector;



//@}


JIVE_END_PACKAGE( util )
