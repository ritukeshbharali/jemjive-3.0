
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( solver )


//=======================================================================
//   class ConstrainedSolver
//=======================================================================

/*!

  \brief Bundles a solver and a constraints handler into a single
  object.

  <code>\#include <jive/solver/ConstrainedSolver.h></code>

  A \c ConstrainedSolver object bundles a \c Solver object and a \c
  Constrainer object. When the member function \c solve() is invoked
  on a \c ConstrainedSolver object, it will automatically apply the
  constraints encapsulated by its \c Constrainer object.

*/

class ConstrainedSolver : public Solver
{
 public:

//-----------------------------------------------------------------------
//   constructor
//-----------------------------------------------------------------------

/*!

  \brief Constructs a constrained solver given another solver and a
  constraints handler.

  Constructs a new \c ConstrainedSolver that encapsulates the \c
  Solver object solver and the \c Constrainer object \a
  constrainer. It is your responsibility to make sure that the solver
  object \a solver has a reference to the constrained coefficient
  matrix <code>constrainer->getOutputMatrix()</code>.

  \param solver - a \c Solver object.

  \param constrainer - a \c Constrainer object.

  \pre <code>
    solver      != nullptr && <br>
    constrainer != nullptr
  </code>

*/

  ConstrainedSolver ( const jem::Ref<Solver>&       solver,
                      const jem::Ref<Constrainer>&  constrainer );


//-----------------------------------------------------------------------
//   solve
//-----------------------------------------------------------------------

/*!

  \brief Computes the solution of a linear system of equations
  subjected to a set of linear constraints.

  Computes the solution of a linear system of equations subjected to a
  set of linear constraints. If \c solver and \c constrainer denote
  the solver and constraints handler, respectively, that were passed
  to the constructor, then this function executes the following code:

  \code

  constrainer->apply ();

  Constrainer::Shape sh = constrainer_->outputMatrixShape ();

  Vector x ( sh[1] );
  Vector b ( sh[0] );

  constrainer->getRhs      (   b, rhs );
  solver->solve            (   x,   b );
  constrainer->getSolution ( lhs,   x );

  \endcode

  Note that the function \c apply may update the shape of the output
  matrix. It is therefore called before the solution vector and
  right-hand side vector are created.

*/

  virtual void solve ( const Vector& lhs,
                       const Vector& rhs );


 protected:

  virtual              ~ConstrainedSolver ();

};



JIVE_END_PACKAGE( solver )
