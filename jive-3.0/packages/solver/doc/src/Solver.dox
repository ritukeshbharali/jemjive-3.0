
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( solver )


//=======================================================================
//   class Solver
//=======================================================================

/*!

  \brief Computes the solution of a linear system of equations.

  <code>\#include <jive/solver/Solver.h></code>

  The abstract class \c Solver defines a single interface for various
  algorithms that compute the solution of a linear system of
  equations. You can use this class to implement algorithms that
  require the solution of one or more linear systems and that do not
  care how that solution is computed.

  \sa \c Constrainer, \c Preconditioner

*/

class Solver : public jem::Object
{
 public:

//-----------------------------------------------------------------------
//   typedefs
//-----------------------------------------------------------------------

/*!

  \brief A type representing a set of properties.

  The \c Properties type represents a set of properties. It is just a
  convenient alias for \c jem::util::Properties.

*/

  typedef jem::util::Properties Properties;


/*!

  \brief A type that represents a vector.

  The \c Vector type is just a convenient alias for \c
  jive::util::Vector, which, in turn, is an alias for \c
  jem::Array<double>.

*/

  typedef util::Vector Vector;


//-----------------------------------------------------------------------
//   solve
//-----------------------------------------------------------------------

/*!

  \brief Computes the solution of a linear system of equations.

  Computes the solution of the linear system of equations

  <i>A * lhs = rhs</i>

  in which <i>A</i> denotes the coefficient matrix. This matrix is not
  passed as a parameter to this function. The reason is that a
  particular implementation of this function may require a particular
  data structure in which the coefficient matrix is stored. For
  instance, a direct solution algorithm must know how the matrix
  elements are stored in memory. An iterative algorithm, on the other
  hand, only needs to execute a series of matrix-vector products and
  does not care how the matrix elements are stored.
  
  Since the coefficient matrix is not passed as an parameter, a \c
  Solver object must either store the matrix itself or store a
  reference to the matrix. The latter approach has been adopted by all
  classes in Jive that are derived from the \c Solver class.

  Note that the coefficient matrix does not necessarily have to be a
  square matrix.

  When calling this function, the vector \a rhs should be filled with
  the components of the right-hand side vector. On exit, the vector \a
  lhs will contain the components of the solution vector. The size of
  the vector \a lhs must be equal to the number of columns in the
  coefficient matrix, while the size of the vector \a rhs must be
  equal to the number of rows in the coefficient matrix.

  \param lhs - the solution vector.

  \param rhs - the right-hand side vector.

  \throws SolverException - if the solution could not be computed
  (singular matrix, breakdown of the solution algorithm, etc).

  \pre The sizes of the vectors \a lhs and \a rhs are compatible with
  the shape of the coefficient matrix.

*/

  virtual void solve ( const Vector& lhs,
                       const Vector& rhs ) = 0;


//-----------------------------------------------------------------------
//   configure
//-----------------------------------------------------------------------

/*!

  \brief Configures this solver given a set of properties.

  Configures this solver given the set of properties stored in the
  object \a props. To be precise, this function sets the parameters
  that affect the solution procedure implemented by this solver by
  extracting the relevant properties from the \a props object. The
  object \a conf provides information about the actual configuration
  of this solver object: when this function returns, \a conf contains
  all the properties that have been used to configure this solver.

  Because a solver object knows which properties to use, a program can
  call this function to configure a solver without having any specific
  knowledge of the solver. The program can therefore simply read the
  properties from an input file and pass them straight on to the
  solver. Only the user who creates the property file needs to know
  which properties are relevant for which type of solver.

  \param conf  - used properties.

  \param props - input properties.

  \throws jem::util::PropertyException - if an invalid property has
  been specified.

*/

  virtual void configure

    ( const Properties&  conf,
      const Properties&  props );


//-----------------------------------------------------------------------
//   other functions
//-----------------------------------------------------------------------


  static  jem::Class*   getType   ();
  virtual jem::Class*   getClass  () const;


 protected:

  virtual              ~Solver ();

};



JIVE_END_PACKAGE( solver )
