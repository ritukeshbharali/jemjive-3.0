
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( solver )


//=======================================================================
//   class SolverException
//=======================================================================

/*!

  \brief Signals the failure of a solver or preconditioner.

  <code>\#include <jive/solver/SolverException.h></code>

  A \c SolverException is thrown when a solver fails to compute the
  solution of a linear system of equations. It is typically thrown
  when: the system of equations is singular; the maximum number of
  iterations is exceeded; the solution algorithm breaks down; etc.

  A \c SolverException is also thrown when a preconditioner fails to
  compute an estimate of the solution of a linear system of equations.

*/

class SolverException : public jem::Exception
{
 public:

//-----------------------------------------------------------------------
//   constructor
//-----------------------------------------------------------------------

/*!

  \brief Constructs a new \c SolverException given a location and
  message string.

  Constructs a new \c SolverException given a location and message
  string.

  \param place - a string describing where this exception was thrown.

  \param msg - a string describing why this exception was thrown.

*/
  
  explicit SolverException

    ( const jem::String&  place = String (),
      const jem::String&  msg   = String () );


//-----------------------------------------------------------------------
//   other functions
//-----------------------------------------------------------------------


  virtual jem::String name () const;

};




JIVE_END_PACKAGE( solver )
