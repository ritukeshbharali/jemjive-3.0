
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( solver )


//=======================================================================
//   class SparseLU
//=======================================================================

/*!

  \brief Implements a direct solver that is based on sparse LU
  factorization with pivoting.

  <code>\#include<jive/solver/SparseLU.h></code>

  The class \c SparseLU implements a direct solution algorithm that is
  based on LU factorization with partial (row-wise) pivoting. It can
  be used to solve any linear system of equations as long as the
  coefficient matrix is square and non-singular.

  By default, a \c SparseLU instance will automatically update the LU
  factorization of the coefficient matrix whenever that is
  necessary. You can disable this behavior by calling the member
  function \c enableAutoFactor.

  Although the \c SparseLU solver is often not the most efficient
  solver, it is one of the most robust solvers in Jive.

*/

class SparseLU : public DirectSolver
{
 public:

//-----------------------------------------------------------------------
//   typedefs
//-----------------------------------------------------------------------

/*!

  \brief A type representing the coefficient matrix of a system of
  equations.

  The \c MatrixObject type represents the coefficient matrix of a
  linear system of equations. It is an alias for \c
  jive::algebra::SparseMatrixObject.

*/

  typedef algebra::SparseMatrixObject MatrixObject;


//-----------------------------------------------------------------------
//   events
//-----------------------------------------------------------------------

/*!

  \brief Signals the occurrence of a zero pivot.

  The event \c zeroPivotEvent is emitted whenever a zero pivot is
  encountered. The event argument is the index of the matrix column
  containing the zero pivot.

*/

  jem::util::Event<int> zeroPivotEvent;


//-----------------------------------------------------------------------
//   constructor
//-----------------------------------------------------------------------

/*!

  \brief Constructs a new \c SparseLU solver given a matrix object.

  Constructs a new \c SparseLU solver that encapsulates a reference to
  the coefficient matrix \a matrix. The solver connects itself to the
  \c changeEvent of the matrix so that it receives an event whenever
  the matrix has been modified. In this way, the solver automatically
  knows when it is necessary to (re-)compute the LU factorization of
  the coefficient matrix.

  \param matrix - the coefficient matrix of the linear system of
  equations to be solved.

  \pre <code>matrix != nullptr</code>

*/


  explicit SparseLU ( const jem::Ref<MatrixObject>& matrix );


//-----------------------------------------------------------------------
//   factor
//----------------------------------------------------------------------------  

/*!

  \brief Computes the LU factorization of the coefficient matrix.

  Computes the LU factorization of the coefficient matrix that has
  been passed to the constructor of this \c SparseLU object. This
  function does nothing if the current LU factorization is up to date;
  that is, if the coefficient matrix has not been modified since the
  last time that this function was called.

  If a zero pivot is encountered during the factorization procedure,
  and the maximum number of zero pivots has not yet been exceeded, the
  zero pivot is replaced by an infinitely large number. That is, the
  inverse of the pivot is set to zero. A pivot is marked as zero if
  its value divided by a scale factor is less than the zero pivot
  threshold. The scale factors are equal to the maximum row elements
  -- in absolute value -- of the coefficient matrix.

  \throws SolverException - if the maximum number of allowed zero
  pivots is exceeded.

  \throws jem::IllegalArgumentException - if the coefficient matrix is
  non-square.

*/

  void factor ();


//-----------------------------------------------------------------------
//   solve
//-----------------------------------------------------------------------

/*!

  \brief Computes the solution of a linear system of equations.

  Computes the solution of

  <i>L * U * lhs = rhs</i>

  with <i>L</i> and <i>U</i> the lower and upper factors of the
  coefficient matrix that has been passed to the constructor of this
  \c SparseLU object. This function calls the \c factor() function to
  (re-)compute the lower and upper factors, unless the auto-factorization
  mode has been disabled by the \c enableAutoFactor() function.

  When this function is called, the vector \a rhs should contain the
  right-hand side vector. On exit, the vector \a lhs will be set to
  the solution of the system of equations. The sizes of the two
  vectors must match the size of the coefficient matrix.

  \param lhs - the solution vector.

  \param rhs - the right-hand side vector.

  \pre The sizes of the vectors \a lhs and \a rhs are equal to the
  size of the coefficient matrix.

  \throws SolverException - if the maximum number of allowed zero
  pivots is exceeded.

  \throws jem::IllegalArgumentException - if the coefficient matrix is
  non-square.

*/

  virtual void solve ( const Vector& lhs,
                       const Vector& rhs );


//-----------------------------------------------------------------------
//   enableAutoFactor
//-----------------------------------------------------------------------

/*!

  \brief Sets the auto-factorization mode.

  Enables (when \a choice is \c true) or disables (when \a choice is
  \c false) the auto-factorization mode. If this mode is enabled, the
  function \c factor() is automatically called by the \c solve()
  function. Otherwise, you are responsible for calling the \c factor()
  function.

  \param choice - a boolean value that indicates whether the
  auto-factorization mode should be enabled or not.

  \return \c true if the auto-factorization mode was enabled before
  this function was called, and \c false otherwise.

*/

  bool enableAutoFactor ( bool choice );
  


//-----------------------------------------------------------------------
//   other functions
//-----------------------------------------------------------------------


  virtual void      setZeroPivotThreshold ( double eps );
  virtual double    getZeroPivotThreshold () const;
  
  virtual void      setMaxZeroPivotCount  ( int n );
  virtual int       getMaxZeroPivotCount  () const;
  

  
  
 protected:
  
  virtual          ~SparseLU ();
  
};



JIVE_END_PACKAGE( solver )
