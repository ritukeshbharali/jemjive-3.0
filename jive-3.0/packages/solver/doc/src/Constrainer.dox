
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( solver )


//=======================================================================
//   class Constrainer
//=======================================================================

/*!

  \brief Applies a set of constraints to a linear system of equations.

  <code>\#include <jive/solver/Constrainer.h></code>

  The abstract class \c Constrainer can be used to apply a set of
  constraints to a linear system of equations. It extends the \c
  algebra::MatrixTransformer class with functions for computing the
  right-hand side vector for the constrained system of equations, and
  for transforming the solution of the constrained system to the
  original system.

  A \c Constrainer has in input matrix and an output matrix of type \c
  algebra::AbstractMatrix. The input matrix represents the coefficient
  matrix of the original, unconstrained system of equations, while the
  output matrix represents the coefficient matrix of the constrained
  system of equations. The input and output matrices do not
  necessarily have to be square; a subclass of the \c Constrainer
  class may provide support for non-square matrices. All current \c
  Constrainer subclasses in Jive, however, only support square
  matrices.

  The \c Constrainer class is typically used together with the \c
  Solver class to compute the solution of a linear system of equations
  that is subjected to a set of constraints.

  Note that a \c Constrainer object is sometimes called a \em
  constraints handler.

  \sa \c ConstrainedSolver

*/


class Constrainer : public algebra::MatrixTransformer
{
 public:

//-----------------------------------------------------------------------
//   typedefs
//-----------------------------------------------------------------------

/*!

  \brief A type representing the shape of a matrix.

  The \c Shape type represents the shape of a matrix.

*/

  typedef jem::Tuple<int,2> Shape;


/*!

  \brief A vector type.

  The \c Vector type represents a one-dimensional array containing
  double precision numbers. It is just an alias for \c
  jive::util::Vector.

*/

  typedef util::Vector Vector;


//-----------------------------------------------------------------------
//   apply
//-----------------------------------------------------------------------

/*!

  \brief Updates the coefficient matrix of the constrained system of
  equations.

  Updates the output matrix and the internal state of this \c
  Constrainer object using the current set of constraints. A reference
  to the output matrix can be obtained by calling the member function
  \c getOutputMatrix().

  The function \c apply() should be called whenever the constraints
  and/or the input matrix have been modified. This function should do
  nothing if the constraints and the input matrix have not been
  modified since the last time that this function was called.

*/

  virtual void apply () = 0;


//-----------------------------------------------------------------------
//   getRhs
//-----------------------------------------------------------------------
 
/*!

  \brief Computes a right-hand side vector for the constrained system
  of equations.

  Computes a right-hand side vector for the constrained system of
  equations given a right-hand side vector for the original system of
  equations. The output parameter \a g will be set to the constrained
  right-hand side vector. The input parameter \a f should contain the
  original right-hand side vector.

  Before calling this function you must have called the function \c
  apply(), unless the coefficient matrix of the original system of
  equations and the constraints have not been modified.

  \param g - the right-hand side vector for the constrained system of
  equations.

  \param f - the right-hand side vector for the original system of
  equations.

  \pre <code>
    g.size() == getOutputMatrix()->shape()[0] && <br>
    f.size() == getInputMatrix()->shape()[0]
  </code>

*/

  virtual void getRhs ( const Vector&  g,
                        const Vector&  f ) const = 0;

//-----------------------------------------------------------------------
//   getSolution
//-----------------------------------------------------------------------

/*!

  \brief Computes the solution of the original system of equations.

  Transforms a solution of the constrained system of equations into a
  solution of the original system of equations. The output parameter
  \a x will be set to the solution of the original system. The input
  parameter \a y should contain the solution of the constrained system
  of equations.

  \param x - the solution of the original system of equations.

  \param y - the solution of the constrained system of equations.

  \pre <code>
    y.size() == getInputMatrix()->shape()[1] && <br>
    x.size() == getOutputMatrix()->shape()[1]
  </code>

*/

  virtual void getSolution ( const Vector&  x,
			     const Vector&  y ) const = 0;


//-----------------------------------------------------------------------
//   inputMatrixShape
//-----------------------------------------------------------------------

/*!

  \brief Returns the shape of the input matrix.

  Returns the shape of the input matrix at the last time that the
  function \c apply() was called. The returned shape may be different
  from
  
  <code>getInputMatrix()->shape()</code>

  because the input matrix may have been modified since \c apply() was
  called. This is the case, for instance, if this constraints handler
  modifies the input matrix in place (that is, if the input and output
  matrices point to the same object).

  You can use this function to determine the size of the solution
  vector and the right-hand side vector for the original system of
  equations.

  \return the shape of the input matrix at the last time that \c
  apply() was called.

*/

  virtual Shape inputMatrixShape () const = 0;


//-----------------------------------------------------------------------
//   outputMatrixShape
//-----------------------------------------------------------------------

/*!

  \brief Returns the shape of the output matrix.

  Returns the shape of the output matrix at the last time that the
  function \c apply() was called.

  You can use this function to determine the size of the solution
  vector and the right-hand side vector for the constrained system of
  equations.

  \return the shape of the output matrix at the last time that \c
  apply() was called.

  \sa \c inputMatrixShape()

*/

  virtual Shape outputMatrixShape () const = 0;



//-----------------------------------------------------------------------
//   re-implemented functions
//-----------------------------------------------------------------------


 protected:

  virtual              ~Constrainer ();

};



JIVE_END_PACKAGE( solver )
