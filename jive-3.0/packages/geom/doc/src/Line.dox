
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( geom )


/*!

  \defgroup LineShapes Line shapes

  \brief Exports various line shapes.

  <code>\#include <jive/geom/Line.h></code>

  Provides classes for constructing shape objects that encapsulate the
  geometrical properties of one-dimensional line elements. Two types
  of line elements are supported: line elements with two nodes and
  linear shape functions; and line elements with three nodes and
  quadratic, isoparametric shape functions.

*/

//@{


//=======================================================================
//   class LinearLine
//=======================================================================

/*!

  \brief Constructs shape objects that encapsulate the geometrical
  properties of linear line elements.

  <code>\#include <jive/geom/Line.h></code>

  The \c LinearLine class provides functions for constructing \c
  InternalShape objects that encapsulate the geometrical properties of
  line elements with two nodes and linear shape functions. The
  following figure shows how the nodes are numbered (left image) and
  where they are located in the local coordinate system (right image).

  \image html LinearLine.jpg

  Note that the local node coordinates of a linear line are identical
  to the node coordinates of a \link StdLinearLine standard linear
  line\endlink.

  A linear line has two boundaries (boundary points, to be
  precise). Boundary 0 coincides with node 0, and boundary 1 coincides
  with node 1. The normals on these boundaries point \em away from the
  interior of the line.

  Note that the \c LinearLine class has only static members; it should
  be used as a mini name space.

  \sa \c QuadraticLine

*/

class LinearLine : public TypeDefs
{
 public:

//-----------------------------------------------------------------------
//   getShape ( given a number of integration points )
//-----------------------------------------------------------------------
  
/*!

  \brief Returns a shape with a specified number of integration
  points.

  Returns an \c InternalShape object that encapsulates the geometrical
  properties of a linear line element. The integer \a ipCount
  specifies the number of integration points within the element.

  This function simply executes:

  \code
  return getShape (
    StdLine::getGaussPoints  ( ipCount ),
    StdLine::getGaussWeights ( ipCount )
  );
  \endcode
  
  Note that the returned shape object may have less integration points
  than \a ipCount; read the documentation of the \c StdLine class for
  more information.

  \param ipCount - the number of integration points.

  \return An \c InternalShape object representing a linear line
  element.

  \sa \c StdLine

*/

  static jem::Ref<InternalShape> getShape ( int ipCount = 2 );



//-----------------------------------------------------------------------
//   getShape ( given a set of integration points )
//-----------------------------------------------------------------------

/*!

  \brief Returns a shape with a specific set of integration points.

  Returns an \c InternalShape object that represents a linear line
  element with a specific set of integration points. The matrix \a
  intPoints should contain the \em local coordinates of the
  integration points: \c intPoints(i,j) should be equal to the i-th
  local coordinate of the j-th integration point. The vector \a
  intWeights should contain the integration weights in the \em local
  coordinate system: \c intWeights[j] should be equal to the local
  integration weight associated with the j-th integration point.

  Note that the arrays \a intPoints and \a intWeights are copied by
  reference. You should not modify the contents of the arrays after
  calling this function.

  You can use the \c StdLine class to compute the integration point
  coordinates and weights. Here is an example:

  \code

  Ref<InternalShape> s = LinearLine::getShape (
    StdLine::getGaussPoints  ( 3 ),
    StdLine::getGaussWeights ( 3 )
  );

  \endcode

  \param intPoints - a matrix containing the \em local coordinates of
  the integration points.

  \param intWeights - a vector containing the \em local integration
  weights.

  \pre <code>
    intPoints.size(0) == 1 && <br>
    intPoints.size(1) == intWeights.size()
  </code>

  \return An \c InternalShape object representing a linear line
  element.
  
  \sa \c StdLine

*/

  static jem::Ref<InternalShape> getShape

    ( const Matrix&  intPoints,
      const Vector&  intWeights );

};


//=======================================================================
//   class QuadraticLine
//=======================================================================

/*!

  \brief Constructs shape objects that encapsulate the geometrical
  properties of quadratic line elements.

  <code>\#include <jive/geom/Line.h></code>

  The \c QuadraticLine class provides functions for constructing \c
  InternalShape objects that encapsulate the geometrical properties of
  line elements with three nodes and quadratic, isoparametric shape
  functions. The following figure shows how the nodes are numbered
  (left image) and where they are located in the local coordinate
  system (right image).

  \image html QuadraticLine.jpg

  Note that the local node coordinates of a quadratic line are
  identical to the node coordinates of a \link StdQuadraticLine
  standard quadratic line\endlink.

  A quadratic line has two boundaries (boundary points). Boundary 0
  coincides with node 0 and boundary 1 coincides with node 2. The
  normals on both boundaries point away from the interior of the line.

  The \c QuadraticLine class has only static members; it should be
  used as a mini name space.

  \sa \c LinearLine

*/


class QuadraticLine
{
 public:

//-----------------------------------------------------------------------
//   getShape ( given a number of integration points )
//-----------------------------------------------------------------------

/*!

  \brief Returns a shape with a specified number of integration
  points.

  Returns an \c InternalShape object that encapsulates the geometrical
  properties of a quadratic line element. The integer \a ipCount
  specifies the number of integration points within the element. This
  function is similar to \c LinearLine::getShape().

  \param ipCount - the number of integration points.

  \return An \c InternalShape object that encapsulates the geometrical
  properties of a quadratic line element.

*/
  
  static jem::Ref<InternalShape> getShape ( int ipCount = 3 );


//-----------------------------------------------------------------------
//   getShape ( given a set of integration points )
//-----------------------------------------------------------------------

/*!

  \brief Returns a shape with a specific set of integration points.

  Returns an \c InternalShape object that represents a quadratic line
  element with a specific set of integration points. This function is
  similar to \c LinearLine::getShape().

  \param intPoints - a matrix containing the \em local coordinates of
  the integration points.

  \param intWeights - a vector containing the \em local integration
  weights.

  \pre <code>
    intPoints.size(0) == 1 && <br>
    intPoints.size(1) == intWeights.size()
  </code>

  \return An \c InternalShape object that encapsulates the geometrical
  properties of a quadratic line element.

*/

  static jem::Ref<InternalShape> getShape

    ( const Matrix&  intPoints,
      const Vector&  intWeights );

};


//@}


JIVE_END_PACKAGE( geom )
