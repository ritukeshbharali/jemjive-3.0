
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( geom )


/*!

  \defgroup TriangleShapes Triangle shapes

  \brief Exports various triangle shapes.

  <code>\#include <jive/geom/Triangle.h></code>

  Provides classes for constructing shape objects that encapsulate the
  geometrical properties of two-dimensional triangle elements. Two
  types of triangles are supported: triangles with three nodes and
  linear shape functions; and triangles with six nodes and quadratic,
  isoparametric shape functions.

*/

//@{


//=======================================================================
//   class LinearTriangle
//=======================================================================

/*!

  \brief Constructs shape objects that encapsulate the geometrical
  properties of linear triangle elements.

  <code>\#include <jive/geom/Triangle.h></code>

  The \c LinearTriangle class provides functions for constructing \c
  InternalShape objects that encapsulate the geometrical properties of
  triangle elements with three nodes and linear shape functions. The
  following figure shows how the nodes are numbered (left image) and
  where they are located in the local coordinate system (right image).

  \image html LinearTriangle.jpg

  Note that the local node coordinates of a linear triangle are
  identical to the node coordinates of a \link StdLinearTriangle
  standard linear triangle\endlink.

  A linear triangle has three boundaries. The table below indicates
  which boundaries are attached to which nodes.

  <center>
  <table>
    <tr> <td> Boundary index <td> Node indices

    <tr> <td> 0 <td> 0, 1
    <tr> <td> 1 <td> 1, 2
    <tr> <td> 2 <td> 2, 0
  </table>
  </center>

  The normals on the boundaries point \em away from the interior of
  the triangle. The boundaries are normally represented by \c
  BoundaryShape objects that are constructed by the \c
  LinearBoundaryLine class. However, you can also specify your own set
  of \c BoundaryShape objects to be used.

  Note that the \c LinearTriangle class has only static members; it
  should be used as a mini name space.

  \sa \c QuadraticTriangle

*/


  class LinearTriangle : public TypeDefs
{
 public:

//-----------------------------------------------------------------------
//   getShape ( given a number of integration points )
//-----------------------------------------------------------------------

/*!
  
  \brief Returns a shape with a specified number of integration
  points.

  Returns an \c InternalShape object that encapsulates the geometrical
  properties of a linear triangle element. The parameter \a ipCount
  specifies the number of integration points within the element, while
  the parameter \a bndIpCount specifies the number of integration
  points on each boundary.

  This function simply executes:

  \code
  return getShape (
    StdTriangle::getGaussPoints  ( ipCount ),
    StdTriangle::getGaussWeights ( ipCount ),
    StdLine::getGaussPoints      ( bndIpCount ),
    StdLine::getGaussWeights     ( bndIpCount )
  );
  \endcode

  Note that both the actual number of integration points within the
  element and on the boundaries may be different from \a ipCount and
  \a bndIpCount; read the documentation of the \c StdTriangle and \c
  StdLine classes for more information.

  \param ipCount - the number of integration points within the
  element.

  \param bndIpCount - the number of integration points on each
  boundary.

  \return An \c InternalShape object representing a linear triangle
  element.

  \sa \c StdLine, \c StdTriangle

*/

  static jem::Ref<InternalShape> getShape ( int ipCount    = 3,
                                            int bndIpCount = 2 );


//-----------------------------------------------------------------------
//   getShape ( given a set of integration points )
//-----------------------------------------------------------------------

/*!

  \brief Returns a shape with a specific set of integration points.

  Returns an \c InternalShape object that represents a linear triangle
  element with a specific set of integration points. The matrix \a
  intPoints should contain the \em local coordinates of the
  integration points within the element: \c intPoints(i,j) should be
  equal to the i-th local coordinate of the j-th integration
  point. The vector \a intWeights should contain the integration
  weights in the \em local coordinate system: \c intWeights[j] should
  be equal to the local integration weight associated with the j-th
  integration point.

  The matrix \a bndIntPoints should contain the local coordinates of
  the integration points on each boundary. The vector \a bndIntWeights
  should contain the corresponding integration weights, also in the
  local coordinate system of the boundaries (see the documentation of
  the \c LinearBoundaryLine class for more information).

  Note that all the input arrays are copied by reference. You should
  not modify the contents of these arrays after calling this function.

  You can use the \c StdTriangle and \c StdLine classes to compute the
  integration point coordinates and weights. Here is an example:

  \code

  Ref<InternalShape> s = LinearTriangle::getShape (
    StdTriangle::getGaussPoints    ( 13 ),
    StdTriangle::getGaussWeights   ( 13 ),
    StdLine::getNewtonCotesPoints  ( 4 ),
    StdLine::getNewtonCotesWeights ( 4 ),
  );

  \endcode

  \param intPoints - a matrix containing the \em local coordinates of
  the integration points within the element.

  \param intWeights - a vector containing the weights of the internal
  integration points in the \em local coordinate system.

  \param bndIntPoints - a matrix containing the \em local coordinates
  of the integration points on each boundary.

  \param bndIntWeights - a vector containing the weights of the
  boundary integration points in the \em local coordinate system of
  the boundaries.

  \pre <code>
    intPoints.size(0) == 2 && <br>
    intPoints.size(1) == intWeights.size() && <br>
    bndIntPoints.size(0) == 1 && <br>
    bndIntPoints.size(1) == bndIntWeights.size()
  </code>

  \return An \c InternalShape object that encapsulates the geometrical
  properties of a linear triangle element.
  
  \sa \c StdLine, \c StdTriangle

*/

  static jem::Ref<InternalShape> getShape

    ( const Matrix&   intPoints,
      const Vector&   intWeights,
      const Matrix&   bndIntPoints,
      const Vector&   bndIntWeights );
  

//-----------------------------------------------------------------------
//   getShape ( given a set of boundaries )
//-----------------------------------------------------------------------

/*!

  \brief Returns a shape with a specific set of boundaries.

  Returns an \c InternalShape object that represents a linear triangle
  element with a specific set of integration points and
  boundaries. The matrix \a intPoints should contain the \em local
  coordinates of the integration points within the element: \c
  intPoints(i,j) should be equal to the i-th local coordinate of the
  j-th integration point. The vector \a intWeights should contain the
  integration weights in the \em local coordinate system: \c
  intWeights[j] should be equal to the local integration weight
  associated with the j-th integration point.

  The \c ShapeBoundary object \a boundary specifies the boundaries to
  be associated with the returned shape object.

  Note that all the two input arrays and the members of the \c
  ShapeBoundary object are copied by reference. You should not modify
  the contents of these arrays and members after calling this
  function.
  
  \param intPoints - a matrix containing the \em local coordinates of
  the integration points within the element.

  \param intWeights - a vector containing the weights of the internal
  integration points in the \em local coordinate system.

  \param boundary - the boundaries of the shape object that is to be
  constructed.

  \pre <code>
    intPoints.size(0) == 2 && <br>
    intPoints.size(1) == intWeights.size()
  </code>

  \return An \c InternalShape object that encapsulates the geometrical
  properties of a linear triangle element.

*/

  static jem::Ref<InternalShape> getShape

    ( const Matrix&         intPoints,
      const Vector&         intWeights,
      const ShapeBoundary&  boundary );

};


//=======================================================================
//   class QuadraticTriangle
//=======================================================================

/*!

  \brief Constructs shape objects that encapsulate the geometrical
  properties of quadratic triangle elements.

  <code>\#include <jive/geom/Triangle.h></code>

  The \c QuadraticTriangle class provides functions for constructing
  \c InternalShape objects that encapsulate the geometrical properties
  of triangle elements with six nodes and quadratic, isoparametric
  shape functions. The following figure shows how the nodes are
  numbered (left image) and where they are located in the local
  coordinate system (right image).

  \image html QuadraticTriangle.jpg

  Note that the local node coordinates of a quadratic triangle are
  identical to the node coordinates of a \link StdQuadraticTriangle
  standard quadratic triangle\endlink.

  A quadratic triangle has three boundaries. The table below indicates
  which boundaries are attached to which nodes.

  <center>
  <table>
    <tr> <td> Boundary index <td> Node indices

    <tr> <td> 0 <td> 0, 1, 2
    <tr> <td> 1 <td> 2, 3, 4
    <tr> <td> 2 <td> 4, 5, 0
  </table>
  </center>

  The normals on the boundaries point \em away from the interior of
  the triangle. The boundaries are normally represented by \c
  BoundaryShape objects that are constructed by the \c
  QuadraticBoundaryLine class. However, you can also specify your own
  set of \c BoundaryShape objects to be used.

  Note that the \c QuadraticTriangle class has only static members; it
  should be used as a mini name space.

  \sa \c LinearTriangle

*/


class QuadraticTriangle : public TypeDefs
{
 public:


//-----------------------------------------------------------------------
//   getShape ( given a number of integration points )
//-----------------------------------------------------------------------

/*!
  
  \brief Returns a shape with a specified number of integration
  points.

  Returns an \c InternalShape object that encapsulates the geometrical
  properties of a quadratic triangle element. This function is similar
  to \c LinearTriangle::getShape().

  \param ipCount - the number of integration points within the
  element.

  \param bndIpCount - the number of integration points on each
  boundary.

  \return An \c InternalShape object representing a quadratic triangle
  element.

*/

  static jem::Ref<InternalShape> getShape ( int ipCount    = 7,
                                            int bndIpCount = 3 );


//-----------------------------------------------------------------------
//   getShape ( given a set of integration points )
//-----------------------------------------------------------------------

/*!

  \brief Returns a shape with a specific set of integration points.

  Returns an \c InternalShape object that represents a quadratic
  triangle element with a specific set of integration points. This
  function is similar to \c LinearTriangle::getShape().

  \param intPoints - a matrix containing the \em local coordinates of
  the integration points within the element.

  \param intWeights - a vector containing the weights of the internal
  integration points in the \em local coordinate system.

  \param bndIntPoints - a matrix containing the \em local coordinates
  of the integration points on each boundary.

  \param bndIntWeights - a vector containing the weights of the
  boundary integration points in the \em local coordinate system of
  the boundaries.

  \pre <code>
    intPoints.size(0)    == 2 && <br>
    intPoints.size(1)    == intWeights.size() && <br>
    bndIntPoints.size(0) == 1 && <br>
    bndIntPoints.size(1) == bndIntWeights.size()
  </code>

  \return An \c InternalShape object that encapsulates the geometrical
  properties of a quadratic triangle element.

*/

  static jem::Ref<InternalShape> getShape

    ( const Matrix&   intPoints,
      const Vector&   intWeights,
      const Matrix&   bndIntPoints,
      const Vector&   bndIntWeights );


//-----------------------------------------------------------------------
//   getShape ( given a set of boundaries )
//-----------------------------------------------------------------------

/*!

  \brief Returns a shape with a specific set of boundaries.

  Returns an \c InternalShape object that represents a quadratic
  triangle element with a specific set of integration points and
  boundaries. This function is similar to \c
  LinearTriangle::getShape().
  
  \param intPoints - a matrix containing the \em local coordinates of
  the integration points within the element.

  \param intWeights - a vector containing the weights of the internal
  integration points in the \em local coordinate system.

  \param boundary - the boundaries of the shape object that is to be
  constructed.

  \pre <code>
    intPoints.size(0) == 2 && <br>
    intPoints.size(1) == intWeights.size()
  </code>

  \return An \c InternalShape object that encapsulates the geometrical
  properties of a quadratic triangle element.

*/

  static jem::Ref<InternalShape> getShape

    ( const Matrix&         intPoints,
      const Vector&         intWeights,
      const ShapeBoundary&  boundary );

};




//@}

JIVE_END_PACKAGE( geom )
