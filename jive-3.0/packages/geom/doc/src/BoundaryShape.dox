
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jive, an object oriented toolkit for solving
 *  partial differential equations.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *  This file is part of Jive, an object oriented toolkit for
 *  solving partial differential equations.
 *
 *  Jive version: 3.0
 *  Date:         Fri 20 Dec 14:30:12 CET 2019
 */


#include <jive/defines.h>


JIVE_BEGIN_PACKAGE( geom )


//=======================================================================
//   class BoundaryShape
//=======================================================================

/*!

  \brief Encapsulates the geometrical properties of a boundary of a
  finite element.

  <code>\#include <jive/geom/BoundaryShape.h></code>

  The abstract class \c BoundaryShape encapsulates the geometrical
  properties of a boundary of a finite element. It can be used to
  evaluate an integral over a boundary of en element; to evaluate the
  shape functions on a boundary of an element; and to evaluate the
  normals on a boundary of an element.

  The \c BoundaryShape class extends the \c Shape class with the
  functions \c getNormals(), \c getNodeNormals() and \c
  evalNormal(). These functions compute the normal vectors on an
  element boundary in different points on that boundary.

  The rank of the local coordinate system of a boundary shape is one
  less than the rank of the global coordinate system of that
  shape. For instance, a boundary line has a one-dimensional local
  coordinate system and `lives' in a two-dimensional global coordinate
  system.

  \sa \c InternalShape

*/

//-----------------------------------------------------------------------
//   class BoundaryShape
//-----------------------------------------------------------------------


class BoundaryShape : public Shape
{
 public:

  typedef Shape Super;
  

//-----------------------------------------------------------------------
//   getType
//-----------------------------------------------------------------------

/*!

  \brief Returns a pointer to a \c Class object representing this
  class.

  Returns a pointer to a \c jem::Class object that represents the \c
  BoundaryShape class. This pointer remains valid during the entire
  lifetime of the current program.

  \return A pointer to a \c jem::Class object that represents this
  class.

*/

  static jem::Class* getType ();


//-----------------------------------------------------------------------
//   globalRank
//-----------------------------------------------------------------------

/*!

  \brief Returns the global rank of this shape.

  Returns the rank (number of dimensions) of the global coordinate
  system in which this boundary shape `lives'. The implementation
  provided by the \c BoundaryShape class returns

  <code>this->localRank() + 1</code>

  \return The global rank of this boundary shape.

*/
  
  virtual int globalRank () const;
  

//-----------------------------------------------------------------------
//   getNormals
//-----------------------------------------------------------------------
  
/*!

  \brief Computes the normal vectors in the integration points.

  Fills the matrix \a q with the normal vectors in the integration
  points of this boundary shape: \c q(i,j) is set to the i-th
  component of the normal vector in the j-th integration point. As a
  bonus, the vector \a w is filled with the integration weights in the
  global coordinate system: \c w[i] is set to the integration weight
  associated with the i-th integration point. The matrix \a c should
  contain the global node coordinates: \c c(i,j) should be equal to
  the i-th global coordinate of the j-th node.

  \param q - a matrix that will be filled with the normal vectors in
  the integration points.

  \param w - a vector that will be filled with the global integration
  points.

  \param c - a matrix containing the global node coordinates.

  \pre <code>
    q.size(0) == this->globalRank() && <br>
    q.size(1) == this->integrationPointCount() && <br>
    w.size()  == this->integrationPointCount() && <br>
    c.size(0) == this->globalRank() && <br>
    c.size(1) == this->nodeCount()
  </code>

*/


  virtual void getNormals

    ( const Matrix&  q,
      const Vector&  w,
      const Matrix&  c ) const = 0;
  

//-----------------------------------------------------------------------
//   getNodeNormals
//-----------------------------------------------------------------------

/*!

  \brief Computes the normal vectors in the nodes of this shape.

  Fills the matrix \a q with the normal vectors in the nodes of this
  boundary shape: \c q(i,j) is set to the i-th component of the normal
  vector in the j-th node. The matrix \a c should contain the global
  node coordinates: \c c(i,j) should be equal to the i-th global
  coordinate of the j-th node.

  \param q - a matrix that will be filled with the normal vectors in
  the nodes.

  \param c - a matrix containing the global node coordinates.

  \pre <code>
    q.size(0) == this->globalRank() && <br>
    q.size(1) == this->nodeCount()  && <br>
    c.size(0) == this->globalRank() && <br>
    c.size(1) == this->nodeCount()
  </code>
  
*/

  virtual void getNodeNormals

    ( const Matrix&  q,
      const Matrix&  c ) const = 0;


//-----------------------------------------------------------------------
//   evalNormal
//-----------------------------------------------------------------------

/*!

  \brief Computes the normal vector in a given point.

  Fills the vector \a q with the components of the normal vector in a
  specific point within this boundary shape: \c q[i] is set to the
  i-th component of the normal vector. The vector \a u should contain
  the local coordinates of that point: \c u[i] should be equal to the
  i-th local coordinate. The matrix \a c should contain the global
  node coordinates: \c c(i,j) should be equal to the i-th global
  coordinate of the j-th node.

  \param q - a vector that will be filled with the components of the
  normal vector in the specified point.

  \param u - a vector containing the local coordinates of that point.

  \param c - a matrix containing the global node coordinates.

  \pre <code>
    q.size()  == this->globalRank() && <br>
    u.size()  == this->localRank()  && <br>
    c.size(0) == this->globalRank() && <br>
    c.size(1) == this->nodeCount()
  </code>

*/

  virtual void evalNormal

    ( const Vector&  q,
      const Vector&  u,
      const Matrix&  c ) const = 0;


//-----------------------------------------------------------------------
//   Other functions
//-----------------------------------------------------------------------

     
  virtual jem::Class* getClass () const;
  
  
 protected:           
                      
  virtual ~BoundaryShape ();
};




JIVE_END_PACKAGE( geom )
