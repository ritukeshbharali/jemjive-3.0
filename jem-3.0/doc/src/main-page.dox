
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */

/*!

  \mainpage Jem reference manual

  This is the main index page of the Jem reference manual.

  Jem is an object oriented programming toolkit written in C++. It
  combines the efficiency and versatility of C++ with several powerful
  concepts provided by Fortran 90, Java and C# that facilitate the
  development of robust, modular software. These concepts include:

  \li <b>Automatic memory management</b> allocate objects that are
  automatically deleted when they are no longer being referenced.

  \li <b>Multi-dimensional array syntax</b> write expressions that
  operate on multi-dimensional arrays.

  \li <b>Events</b> built completely independent software components and
  connect them with events.

  \li <b>Object serialization</b> read/write graphs of objects from/to a
  file in a machine-independent format.

  \li <b>Parallel programming</b> write concurrent programs that run
  efficiently on multi-processor machines with shared memory as well
  as distributed memory.

  \li <b>Reflection</b> discover the capabilities of objects at
  run-time.

  In addition to these general concepts, Jem provides a collection of
  classes and functions that hide system-dependent programming
  interfaces. Consequently, an application built on top of Jem can easily
  be ported from one operating system to another.

  Classes and functions in Jem each live in their own namespace referred
  to as \c jem::. The library is subdivided into packages, where each
  package bundles a set of Classes and functions that form a logical
  unit. The name of the package usually serves as a good indication of
  the purpose of the bundled objects. Also, each package introduces a new
  namespace with the name of that package. For example, if \c name is the
  name of the package in jem for example, than the full name of the
  namespace is \c jem::name.

  From here you can go to the documentation of the individual packages of
  Jem.

  The following packages are available:

  \li \subpage jem_base
  \li \subpage jem_gl
  \li \subpage jem_hdf5
  \li \subpage jem_io
  \li \subpage jem_mp
  \li \subpage jem_mt
  \li \subpage jem_numeric
  \li \subpage jem_std
  \li \subpage jem_util
  \li \subpage jem_xml
  \li \subpage jem_xutil

*/
