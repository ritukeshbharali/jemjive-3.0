
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */

#ifndef JEM_STD_ZFUNCS_H
#define JEM_STD_ZFUNCS_H

#ifndef JEM_STD_COMPLEX
#  include <jem/std/complex.h>
#endif

#include <jem/base/functional.h>


JEM_BEGIN_PACKAGE_BASE


//-----------------------------------------------------------------------
//   complex expression classes
//-----------------------------------------------------------------------


template <class E>   class RealExpr {};
template <class E>   class ImagExpr {};


JEM_BEGIN_NAMESPACE( zfuncs )


//-----------------------------------------------------------------------
//   unary function classes
//-----------------------------------------------------------------------

/*!

  \class Abs zfuncs.dox jem/std/zfuncs.h

*/

template <class T>

  class Abs : public UnaryFunc< std::complex<T>, T >

{
 public:

  T operator () ( const std::complex<T>& z ) const
  {
    return std::abs ( z );
  }

};


/*!

  \class Arg zfuncs.dox jem/std/zfuncs.h

*/

template <class T>

  class Arg : public UnaryFunc< std::complex<T>, T >

{
 public:

  T operator () ( const std::complex<T>& z ) const
  {
    return std::arg ( z );
  }

};

/*!

  \class Conj zfuncs.dox jem/std/zfuncs.h

*/

template <class T>

  class Conj : public UnaryFunc< std::complex<T>,
                                 std::complex<T> >

{
 public:

  std::complex<T> operator () ( const std::complex<T>&  z ) const
  {
    return std::complex<T> ( z.real(), -z.imag() );
  }

};


/*!

  \class Imag zfuncs.dox jem/std/zfuncs.h

*/


template <class T>

  class Imag : public UnaryFunc< std::complex<T>, T >

{
 public:

  T operator () ( const std::complex<T>& z ) const
  {
    return z.imag ();
  }

};

/*!

  \class Norm zfuncs.dox jem/std/zfuncs.h

*/

template <class T>

  class Norm : public UnaryFunc< std::complex<T>, T >

{
 public:

  T operator () ( const std::complex<T>& z ) const
  {
    return std::norm ( z );
  }

};


/*!

  \class Real zfuncs.dox jem/std/zfuncs.h

*/

template <class T>

  class Real : public UnaryFunc< std::complex<T>, T >

{
 public:

  T operator () ( const std::complex<T>& z ) const
  {
    return z.real ();
  }

};


//-----------------------------------------------------------------------
//   binary function classes
//-----------------------------------------------------------------------

/*!

  \class CombineTraits zfuncs.dox jem/std/zfuncs.h

*/


template <class T, class U>

  class CombineTraits

{
 public:

  typedef typename
    PromoteTypes<T,U>::ResultType   ZType;

  typedef std::complex<ZType>       ResultType;

};


/*!

  \class ComputeTraits zfuncs.dox jem/std/zfuncs.h

*/

template <class T, class Op>

  class ComputeTraits

{
 public:

  typedef typename
    PromoteTypes<T, typename
      Op::ResultType>::ResultType   ZType;

  typedef std::complex<ZType>       ResultType;

};

/*!

  \class Polar zfuncs.dox jem/std/zfuncs.h

*/

template <class T, class U = T>

  class Polar : public BinaryFunc
    < T, U, typename CombineTraits<T,U>::ResultType >

{
 public:

  typename CombineTraits<T,U>::ResultType

                          operator ()

    ( const T&              rho,
      const U&              theta ) const

  {
    return std::polar ( ZType(rho), ZType(theta) );
  }

};

/*!

  \class SetImag zfuncs.dox jem/std/zfuncs.h

*/

template <class T, class U = T, class Op = Nil>

  class SetImag : public BinaryFunc
    < std::complex<T>, U,
      typename ComputeTraits<T,Op>::ResultType >

{
 private:

  Op                        op_;

 public:

                            SetImag

    ( const Op&               op ) :

      op_ ( op )

  {}

                            SetImag

    ( const SetImag&          rhs ) :

      op_ ( rhs.op_ )

  {}

  typename ComputeTraits<T,Op>::ResultType

                            operator ()

    ( const std::complex<T>&  z,
      const U&                im ) const

  {
    return typename ComputeTraits<T,Op>
      :: ResultType ( z.real(), op_( z.imag(), im ) );
  }

};


/*!

  \class SetReal zfuncs.dox jem/std/zfuncs.h

*/

template <class T, class U = T, class Op = Nil>

  class SetReal : public BinaryFunc
    < std::complex<T>, T,
      typename ComputeTraits<T,Op>::ResultType >

{
 private:

  Op                        op_;

 public:

                            SetReal

    ( const Op&               op ) :

      op_ ( op )

  {}

                            SetReal

    ( const SetReal&          rhs ) :

      op_ ( rhs.op_ )

  {}

  typename ComputeTraits<T,Op>::ResultType

                            operator ()

    ( const std::complex<T>&  z,
      const U&                re ) const

  {
    return typename ComputeTraits<T,Op>
      :: ResultType ( op_( z.real(), re ), z.imag() );
  }

};

/*!

  \class Zip zfuncs.dox jem/std/zfuncs.h

*/

template <class T, class U = T>

  class Zip : public BinaryFunc
    < T, U, typename CombineTraits<T,U>::ResultType >

{
 public:

  typename CombineTraits<T,U>::ResultType

                          operator ()

    ( const T&              re,
      const U&              im ) const

  {
    return typename
      CombineTraits<T,U>::ResultType ( re, im );
  }

};


JEM_END_NAMESPACE( zfuncs )

JEM_END_PACKAGE_BASE

#endif
