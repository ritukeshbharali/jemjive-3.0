
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE

//=======================================================================
//   class Object
//=======================================================================

/*!
  \class Object Object.dox jem/base/Object.h

  \brief Provides a single superclass for many classes in jem.

  Many classes in jem are directly or indirectly derived from the
  class \c Object. It can therefore be used to implement heterogeneous
  data structures and generic algorithms. For instance, a list
  containing \c Object instances can be used to store instances of all
  classes derived from the \c Object class.

  Because the \c Object class is not the superclass of all classes,
  Jem provides two non-member functions that can be used to convert
  non-\c Object instances to \c Object instances and the other way
  around. These two functions, named \c toObject() and \c toValue(),
  mimick the boxing/unboxing mechanism provided by the C\# programming
  language.

  The \c Object class in jem is comparable with the \c Object class in
  Java.

  \note Since \c Object is derived from \c Collectable, all \c Object
  instances are subjected to automatic garbage collection. This is
  also true for all classes derived from \c Object.

*/

class Object : public Collectable
{
 public:

//-----------------------------------------------------------------------
//   getType
//-----------------------------------------------------------------------

/*! 

  \brief Returns the \c Class instance representing the \c Object
  class.
     
  Returns a pointer to the \c Class instance representing the \c
  Object class. This pointer is valid during the entire lifetime of
  the program. The \c getType method should be overloaded by all
  classes that are represented by a different \c Class object.
  
  \return A pointer to the \c Class instance representing the \c
  Object class.

  \sa \c Class, \c ClassTemplate.

*/

  static Class* getType ();


//-----------------------------------------------------------------------
//   getClass
//-----------------------------------------------------------------------

/*!

  \brief Returns the \c Class instance representing the runtime class
  of this object.
  
  Returns a pointer to the \c Class instance representing the runtime
  class of this object. If \c T denotes the runtime class of this
  object, then this function is equivalent with \c T::getType(). The
  pointer is valid during the entire lifetime of the program.

  \return A pointer to the \c Class instance representing the runtime
  class of this object.

*/

  virtual Class* getClass () const;


//-----------------------------------------------------------------------
//   toString
//-----------------------------------------------------------------------

/*!

  \brief Returns a short textual description of this object.
  
  Returns a short textual description of this object. The \c toString
  method of the class \c Object returns:

  <code>getClass()->getName() + "@" + String( hashValue() )</code>
   
  \return A \c String representing this object.

*/

  virtual String toString () const;


//-----------------------------------------------------------------------
//   hashValue
//-----------------------------------------------------------------------

/*!

  \brief Returns a hash value for this object.
   
  Returns a hash value for this object. This function should return
  the same hash value when it is invoked more than once on the same
  object, provided that the object is not modified. If two object are
  equal according to the \c equals method, then those objects should
  return the same hash value. Note that two objects which are not
  equal may also return the same hash value.

  The \c hashValue implementation of the \c Object class returns a hash
  value for the memory address of the object.

  \return A long integer representing the hash value of this object.

*/

  virtual long hashValue () const;


//-----------------------------------------------------------------------
//   equals
//-----------------------------------------------------------------------

/*!

  \brief Tests whether two objects are equal.
  
  Tests whether this \c Object is equal to the \c Object \a obj. The
  \c equals method should be:

  \li reflexive: for all objects \c x, <code>x->equals(x)</code> should
  return \c true.
  
  \li symmetric: for all objects \c x and \c y,
  <code>x->equals(y)</code> should return the same value as
  <code>y->equals(x)</code>.
  
  \li transitive: if, for any objects \c x, \c y, and \c z,
  <code>x->equals(y)</code> returns \c true and
  <code>y->equals(z)</code> returns \c true, then
  <code>x->equals(z)</code> should return \c true.

  \li consistent: for all objects \c x and \c y, multiple invocations
  of <code>x->equals(y)</code> should return the same value as long as
  the objects are not modified.

  In addition, <code>x->equals(NIL)</code> should return \c false for
  all objects \c x.

  The default implementation of \c equals returns \c true if and only
  if this object and the argument \a obj are located at the same
  memory address. That is, the default implementation returns
  <code>(this == obj)</code>.
  
  \param obj - the object this object should be compared to, or \c
  NIL.

  \return \c true is this object equals the object \a obj, and 
  \c false otherwise.

*/

  virtual bool equals ( const Ref<Object>& obj ) const;


//-----------------------------------------------------------------------
//   clone
//-----------------------------------------------------------------------

/*!

  \brief Returns a copy of this object.
  
  If this object implements the \c Clonable interface, this function
  calls the \c clone method corresponding with the runtime class of
  this object. Otherwise, an exception is thrown.

  \return A reference to a copy of this object.
  
  \throws IllegalOperationException - if this object does not
  implement the \c Clonable interface.

*/

  Ref<Object> clone () const;

};


JEM_END_PACKAGE_BASE
