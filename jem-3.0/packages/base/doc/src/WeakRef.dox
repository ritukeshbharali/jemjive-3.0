
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


//-----------------------------------------------------------------------
//   class WeakRef
//-----------------------------------------------------------------------

/*! 
  \class WeakRef WeakRef.dox jem/base/WeakRef.h

 
  \brief Provides `safe' acces to a collectable object without
  preventing the deletion of that object.

  Like the template class \c Ref, the class \c WeakRef acts as a
  pointer to a \ref CollectableObject "collectable object" of type \a
  T. Unlike a \c Ref, however, a \c WeakRef does not prevent the
  deletion of a collectable object. This means that if a collectable
  object can be reached only through one or more \c WeakRef instances,
  the collectable object will eventually be deleted.

  A \c WeakRef is safe in the sense that it will return a \c NIL \c
  Ref instance when the collectable object no longer exists.

  \sa \c Ref.

*/

template <class T>
  class WeakRef
{
 public:

//-----------------------------------------------------------------------
//   Constructors
//-----------------------------------------------------------------------

/*!
 
  \brief Constructs a \c WeakRef that does not point to any object.

  Constructs a \c WeakRef that does not point to any object.

  \post <code>this->get() == NIL</code>

*/

  inline WeakRef ();


/*!

  \brief Creates a \c WeakRef that points to an existing object.

  Creates a \c WeakRef that points to the same object as the \c Ref \a
  rhs.

  \param rhs - a \c Ref object.

  \post <code>this->get() == rhs</code>

*/

  inline WeakRef ( const Ref<T>& rhs );


/*!

  \brief Creates a copy of another \c WeakRef.

  Creates a \c WeakRef that points to the same object as the \c
  WeakRef \a rhs.

  \param rhs - the \c WeakRef to be copied.
  
  \post <code>this->get() == rhs.get()</code>

*/

  inline WeakRef ( const WeakRef& rhs );


//-----------------------------------------------------------------------
//   assignment operator
//-----------------------------------------------------------------------

/*!

  \brief Copies another \c WeakRef.

  Copies the \c WeakRef \a rhs to this \c WeakRef.

  \param rhs - the \c WeakRef to be copied.

  \return <code>*this</code>

  \post <code>this->get() == rhs.get()</code>

*/

  inline WeakRef& operator = ( const WeakRef& rhs );


//-----------------------------------------------------------------------
//   get
//-----------------------------------------------------------------------

/*!

  \brief Returns the object this \c WeakRef is pointing to.

  Returns a \c Ref that is either \c NIL or that points to the
  collectable object this \c WeakRef is pointing to.
  
  \return A \c Ref object pointing to the object this \c WeakRef is
  pointing to.

*/

  inline Ref<T> get () const;


//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \brief Interchanges two \c WeakRef objects.

  Interchanges two \c WeakRef objects. This function is equivalent
  with:

  \code
  
  WeakRef<T> tmp( *this );

  (*this) = rhs;
  rhs     = tmp;

  \endcode

  \param rhs - the \c WeakRef with which this \c WeakRef should be
  swapped.

*/

  inline void swap ( WeakRef& rhs );

};


//=======================================================================
//   related functions
//=======================================================================

//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!
  \relates WeakRef

  \brief Interchanges two \c WeakRef objects.

  Swaps two \c WeakRef objects. This function is equivalent with:
  <code>lhs.swap( rhs )</code>.

  \param lhs - a \c WeakRef object.
  \param rhs - another \c WeakRef object.

*/

template <class T>
  inline void swap ( WeakRef<T>& lhs, WeakRef<T>& rhs );




JEM_END_PACKAGE_BASE

