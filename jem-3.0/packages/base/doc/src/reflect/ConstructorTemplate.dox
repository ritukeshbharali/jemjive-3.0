
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */

#ifndef JEM_BASE_REFLECT_CONSTRUCTORTEMPLATE_H
#define JEM_BASE_REFLECT_CONSTRUCTORTEMPLATE_H

#include <jem/base/ObjectTraits.h>
#include <jem/base/reflect/Constructor.h>


JEM_BEGIN_PACKAGE_BASE


//-----------------------------------------------------------------------
//   class ConstructorTemplate
//-----------------------------------------------------------------------

/*!

  \class ConstructorTemplate ConstructorTemplate.dox jem/base/reflect/ConstructorTemplate.h

*/

template <class T, class A = Nil, class B = Nil, class C = Nil>

  class ConstructorTemplate : public Constructor

{
 public:

  typedef Constructor   Super;

  static const int      ARG_COUNT = 3;


  inline                ConstructorTemplate ();

  virtual idx_t         argCount            () const;

  virtual void          getArgTypes

    ( Class**             types )              const;

  virtual Ref<Object>   call

    ( const Ref<Object>*  args )               const;


 protected:

  virtual              ~ConstructorTemplate ();


 private:

  inline Ref<Object>    call_

    ( const Ref<Object>*  args,
      Object*             dummy )              const;

  inline Ref<Object>    call_

    ( const Ref<Object>*  args,
      void*               dummy )              const;

};



JEM_END_PACKAGE_BASE

#endif
