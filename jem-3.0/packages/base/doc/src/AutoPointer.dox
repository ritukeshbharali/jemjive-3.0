
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */

#ifndef JEM_BASE_AUTOPOINTER_H
#define JEM_BASE_AUTOPOINTER_H

#include <jem/base/assert.h>
#include <jem/base/utilities.h>
#include <jem/base/TypeTraits.h>


JEM_BEGIN_PACKAGE_BASE


//-----------------------------------------------------------------------
//   class AutoPointer
//-----------------------------------------------------------------------

/*!

  \class AutoPointer AutoPointer.dox jem/base/AutoPointer.h

*/

template <class T>

  class AutoPointer

{
 public:

  typedef AutoPointer       Self;


  inline                    AutoPointer ();

  inline                    AutoPointer

    ( T*                      rhs );

  inline                    AutoPointer

    ( const AutoPointer&      rhs );

  template <class U>
    inline                  AutoPointer

    ( const AutoPointer<U>&   rhs );

  inline                    AutoPointer

    ( const Nil&              rhs );

  inline                   ~AutoPointer ();

  AutoPointer&              operator  =

    ( const Self&             rhs );

  inline bool               operator ==

    ( const Self&             rhs )        const;

  inline bool               operator ==

    ( const Nil&              rhs )        const;

  inline bool               operator !=

    ( const Self&             rhs )        const;

  inline bool               operator !=

    ( const Nil&              rhs )        const;

  inline T*                 operator -> () const;
  inline T&                 operator  * () const;

  inline void               swap

    ( Self&                   rhs );

  inline bool               isOwner     () const;
  inline T*                 release     () const;
  inline T*                 get         () const;


};


//-----------------------------------------------------------------------
//   related functions
//-----------------------------------------------------------------------


template <class T>

  inline void               swap

  ( AutoPointer<T>&           lhs,
    AutoPointer<T>&           rhs );

//=======================================================================
//   related functions
//=======================================================================

//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \relates AutoPointer

  \brief Swaps to auto pointers

  \param lhs - an auto pointer object

  \param rhs - another auto pointer object


*/

template <class T>

  inline void swap ( AutoPointer<T>& lhs, AutoPointer<T>& rhs )

{
  lhs.swap ( rhs );
}


JEM_END_PACKAGE_BASE

#endif
