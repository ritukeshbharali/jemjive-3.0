
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


/*!

  \defgroup TupleUtilities Tuple utility functions
  
  \brief A collection of functions operating on tuples.

  <code>\#include <jem/base/tuple/utilities.h></code>

  This header file exports a collection of functions that perform
  various operations on \c Tuple objects and tuple
  expressions. Supported operations are:

  \li reduce a tuple to a scalar;
  \li test whether two tuples are equal;
  \li create a tuple given a set of elements.

  Note that these functions are also available through the general
  header file <code><jem/base/Tuple.h></code>.

*/


//@{


//-----------------------------------------------------------------------
//   min
//-----------------------------------------------------------------------

/*!
  
  \brief Computes the minimum value of a tuple expression.

  Computes the minimum value of the tuple expression or \c Tuple
  object \a e.

  \param e - an tuple expression or a \c Tuple object.

  \return The smallest element in the tuple.

  \pre The type \a T supports the \c < operator.

*/

template <class T, int M, int N>
  T min ( const TupleExpr<T,M,N>& e );


//-----------------------------------------------------------------------
//   max
//-----------------------------------------------------------------------

/*!

  \brief Computes the maximum value of a tuple expression.

  Computes the minimum value of the tuple expression or \c Tuple
  object \a e.

  \param e - an tuple expression or a \c Tuple object.

  \return The largest element in the tuple.

  \pre The type \a T supports the \c < operator.

*/

template <class T, int M, int N>
  T max ( const TupleExpr<T,M,N>& e );


//-----------------------------------------------------------------------
//   sum
//-----------------------------------------------------------------------

/*!

  \brief Computes the sum of all elements in a tuple expression.

  Computes the sum of all elements in the tuple expression or \c Tuple
  object \a e.

  \param e - an tuple expression or a \c Tuple object.

  \return The sum of all elements in the tuple.

  \pre The type \a T supports the \c + operator.

*/

template <class T, int M, int N>
  T sum ( const TupleExpr<T,M,N>& e );


//-----------------------------------------------------------------------
//   product
//-----------------------------------------------------------------------

/*!

  \brief Computes the product of all elements in a tuple expression.

  Computes the product of all elements in the tuple expression or \c
  Tuple object \a e.

  \param e - an tuple expression or a \c Tuple object.

  \return The product of all elements in the tuple.

  \pre The type \a T supports the \c * operator.

*/

template <class T, int M, int N>
  T product ( const TupleExpr<T,M,N>& e );


//-----------------------------------------------------------------------
//   testall
//-----------------------------------------------------------------------

/*!

  \brief Tests whether all elements in a tuple expression are true.

  Tests whether all elements in the tuple expression or \c
  Tuple object \a e are true.

  \param e - an tuple expression or a \c Tuple object.

  \return \c true if all elements in the tuple evaluate to \c true,
  and \c false otherwise.

  \pre The type \a T can be converted to a boolean.

*/

template <class T, int M, int N>
  bool testall ( const TupleExpr<T,M,N>& e );



//-----------------------------------------------------------------------
//   testany
//-----------------------------------------------------------------------

/*!

  \brief Tests whether at least one element in a tuple expression is
  true.

  Tests whether at least one element in the tuple expression or \c
  Tuple object \a e is true.

  \param e - an tuple expression or a \c Tuple object.

  \return \c true if at least one elements in the tuple evaluates to
  \c true, and \c false otherwise.

  \pre The type \a T can be converted to a boolean.

*/

template <class T, int M, int N>
  bool testany ( const TupleExpr<T,M,N>& e );


//-----------------------------------------------------------------------
//   equal
//-----------------------------------------------------------------------

/*!

  \brief Tests whether two tuple expressions are equal.

  Tests whether the elements of the tuple expressions \a lhs and \a
  rhs are equal.

  \param lhs - an tuple expression or a \c Tuple object.

  \param rhs - another tuple expression or a \c Tuple object.

  \return <code>testall( lhs == rhs )</code>

*/

template <class T, int M, int N>
  bool equal ( const TupleExpr<T,M,N>& lhs,
               const TupleExpr<T,M,N>& rhs );


//-----------------------------------------------------------------------
//   makeTuple
//-----------------------------------------------------------------------

/*!

  \brief Constructs a one-dimensional tuple of size 1.

  Constructs a \c Tuple of size 1 containing the element \a a.

  \param a - the first element in the returned tuple.

  \return <code>Tuple<T,1>( a )</code>

*/

template <class T>
  inline Tuple<T,1> makeTuple ( T a );


/*!

  \brief Constructs a one-dimensional tuple of size 2.

  Constructs a \c Tuple of size 2 containing the elements
  <i>(a,b)</i>.

  \param a - the first element in the returned tuple.
  
  \param b - the second element in the returned tuple.
    
  \return <code>Tuple<T,2>( a, b )</code>

*/

template <class T>
  inline Tuple<T,2> makeTuple ( T a, T b );


/*!

  \brief Constructs a one-dimensional tuple of size 3.

  Constructs a \c Tuple of size 3 containing the elements
  <i>(a,b,c)</i>.

  \param a - the first element in the returned tuple.
  
  \param b - the second element in the returned tuple.

  \param c - the third element in the returned tuple.
    
  \return <code>Tuple<T,3>( a, b, c )</code>

*/

template <class T>
  inline Tuple<T,3> makeTuple ( T a, T b, T c );


/*!

  \brief Constructs a one-dimensional tuple of size 4.

  Constructs a \c Tuple of size 4 containing the elements
  <i>(a,b,c,d)</i>.

  \param a - the first element in the returned tuple.
  
  \param b - the second element in the returned tuple.

  \param c - the third element in the returned tuple.

  \param d - the fourth element in the returned tuple.
    
  \return <code>Tuple<T,4>( a, b, c, d )</code>

*/

template <class T>
  inline Tuple<T,4> makeTuple ( T a, T b, T c, T d );


//@}



JEM_END_PACKAGE_BASE
