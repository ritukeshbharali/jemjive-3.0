
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


//=======================================================================
//   class TupleExpr
//=======================================================================


/*!
  \class TupleExpr TupleExpr.dox jem/base/TupleExpr.h

  \brief A dummy class representing tuple expressions.

  The class \c TupleExpr is a \em fictitious class that represents
  \ref TupleExpressions "tuple expressions". The template parameter \a
  T denotes the type of the elements of the tuple expression, while
  the template parameters \a M and \a N denotes the shape of the tuple
  expression. For instance, if \c a and \c b are both tuples of type
  \c Tuple<float,3,2>, then the expression <code>(a + b)</code> is
  represented by the class \c TupleExpr<float,3,2>.

  The \c TupleExpr class is used in this documentation to indicate
  that a function accepts a tuple expression as one of its arguments.
  For instance, the declaration

  \code
  template <class T, int M, int N>
    void min ( const TupleExpr<T,M,N>& e );
  \endcode

  indicates that the function \c min can be called with any tuple
  expression with elements of type \c T and with shape
  <i>(M,N)</i>. Thus, <code>min(a + b)</code> is a valid function
  call.

  The \c TupleExpr class is conceptually (but not in reality!) a base
  class of the \c Tuple class. This means that a \c Tuple object can
  be passed to any function expecting a tuple expression. Thus,
  <code>min(a)</code> is also a valid function call.

  \sa \c Tuple, \ref TupleExpressions, \c ArrayExpr.

*/

template <class T, int M, int N>
  class TupleExpr {};



JEM_END_PACKAGE_BASE
