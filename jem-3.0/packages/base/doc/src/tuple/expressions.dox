
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE



/*!

  \page TupleExpressions Tuple expressions

  Jem provides a set of overloaded operators and functions for
  writing expressions that operate on all elements of one or
  more tuples. These operators and functions return special tuple
  objects, called <em>tuple expressions</em>, that can be assigned to
  regular \c Tuple objects. Tuple expressions can also be passed
  to the overloaded operators and functions to create new tuple
  expressions.
  
  Here is an example:

  \code
  Tuple<double,3> a ( 0.0, 1.0, 2.0 );
  Tuple<double,3> b;
  Tuple<double,3> c;

  b = 1.0 + sin( a );
  c = a * a + pow( b, 2.0 );
  \endcode

  This code fragment is equivalent with:
  
  \code
  Tuple<double,3> a ( 0.0, 1.0, 2.0 );
  Tuple<double,3> b;
  Tuple<double,3> c;

  int i;

  for ( i = 0; i < 3; i++ )
  {
    b[i] = 1.0 + sin( a[i] );
  }

  for ( i = 0; i < 3; i++ )
  {
    c[i] = a[i] * a[i] + pow( b[i], 2.0 );
  }
  \endcode
  
  Like an \ref ArrayExpressions "array expression", a tuple expression
  can be viewed as a special type of tuple that comprises a set of
  operators and functions, and a set of operands. The latter set
  consists of \c Tuple objects, scalars and other tuple expression
  objects. The elements of a tuple expression are obtained by applying
  the functions and operators \em element-wise to the elements of the
  operands. Thus, the <i>i</i>-th element of the tuple expression
  <code>(1.0 + sin(a))</code> equals <code>(1.0 + sin(a[i]))</code>.

  If a scalar, such as \c 1.0, is one of the operands of an array
  expression, it is implicitly converted to a tuple-like object that
  has the same size as the other operands involved in the tuple
  expression. The elements of this tuple-like object are all equal to
  the scalar.

  Tuple expressions are efficient for two reasons. First, they are
  based on the `expression template' technique that eliminates the
  creation of intermediate \c Tuple objects (see http://oonumerics.org
  for the details). Second, the for-loop over the elements of a tuple
  expression is automatically unrolled, provided that the size \a N is
  not too large (four in the current implementation).

  The following sections provide an overview of the overloaded
  operators and functions that can be used to create tuple
  expressions.

  
  \section UnaryTupleOperators Unary operators

  <code>\#include <jem/base/tuple/operators.h></code> \b or <br>
  <code>\#include <jem/base/Tuple.h></code>.


  Supported unary operators:

  \li \c - (unary minus)
  \li \c ! (logical not)
  \li \c ~ (bitwise not)

  These operators can be called with either a \c Tuple object or a
  tuple expression. Each returns an tuple expression that applies the
  unary operator to the elements of the tuple argument. The elements
  of the tuple expression are of the same type as the elements of the
  tuple argument.

  The unary operators are defined in the header file
  <code><jem/base/tuple/operators.h></code>. They are also available
  through the general header file <code><jem/base/Tuple.h></code>.


  \section BinaryTupleOperators Binary operators
  
  <code>\#include <jem/base/tuple/operators.h></code> \b or <br>
  <code>\#include <jem/base/Tuple.h></code>.

  Supported binary arithmetic operators:

  \li \c + (addition)
  \li \c - (substraction)
  \li \c * (multiplication)
  \li \c / (division)
  \li \c % (modulo division)

  Supported binary bitwise operators:

  \li \c |  (bitwise or)
  \li \c ^  (bitwise xor)
  \li \c &  (bitwise and)
  \li \c << (left shift)
  \li \c >> (right shift)

  Supported binary logical operators:

  \li \c || (logical or)
  \li \c && (logical and)
  
  Supported comparison operators:

  \li \c <  (less than)
  \li \c <= (less equal)
  \li \c >  (greater than)
  \li \c >= (greater equal)
  \li \c == (equal)
  \li \c != (not equal)

  All the operators listed above can be called with two \c Tuple
  objects, two tuple expressions, or one \c Tuple object and one tuple
  expression. They can also be called with a \c Tuple object and a
  scalar, or a tuple expression and a scalar. They return a tuple
  expression that applies the operator to the elements of the tuple
  arguments and/or scalar argument. The elements of the tuple
  arguments and/or the scalar argument must be of the same type; one
  can not, for instance, add an integer tuple to a floating point
  tuple.

  All operators except the comparison operators return an tuple
  expression of which the elements are of the same type as the
  elements of the tuple arguments and/or scalar argument. The
  comparison operators return an tuple expression of which the
  elements are of type \c bool.

  The binary operators are defined in the header file
  <code><jem/base/tuple/operators.h></code>. They are also available
  through the general header file <code><jem/base/Tuple.h></code>.

  
  \section UnaryTupleFunctions Unary functions

  <code>\#include <jem/base/tuple/intrinsics.h></code> \b or <br>
  <code>\#include <jem/base/Tuple.h></code>.

  The following unary functions can be called with a \c Tuple object
  or a tuple expression:
  
  \li \c abs
  \li \c acos
  \li \c asin
  \li \c atan
  \li \c ceil
  \li \c cos
  \li \c cosh
  \li \c exp
  \li \c floor
  \li \c log
  \li \c log10
  \li \c sin
  \li \c sinh
  \li \c sqrt
  \li \c tan
  \li \c tanh

  Each function returns a tuple expression that applies the function
  to the elements of the tuple argument. The elements of the tuple
  expression are of the same type as the elements of the tuple
  argument.

  The unary functions listed above are defined in the header file
  <code><jem/base/tuple/intrinsics.h></code>. They are also available
  through the general header file <code><jem/base/Tuple.h></code>.

  
  \section BinaryTupleFunctions Binary functions

  <code>\#include <jem/base/tuple/intrinsics.h></code> \b or <br>
  <code>\#include <jem/base/Tuple.h></code>.

  The binary function \c pow can be called with two \c Tuple objects,
  two tuple expressions, or one \c Tuple object and one tuple
  expression. It can also be called with an \c Tuple object and a
  scalar, or an tuple expression and a scalar. The \c pow function
  returns a tuple expression that applies the \c pow function to all
  elements of the tuple arguments and/or scalar argument. The elements
  of the returned tuple expression are of the same type as the
  elements of the tuple arguments and/or scalar argument.

  The \c pow funtion is defined in the header file
  <code><jem/base/tuple/intrinsics.h></code>. It is also available
  through the general header file <code><jem/base/Tuple.h></code>.
  
  
  \section OtherTupleFunctions Other functions

  <code>\#include <jem/base/tuple/intrinsics.h></code> \b or <br>
  <code>\#include <jem/base/Tuple.h></code>.

  Two other functions that create tuple expressions are \c castTo
  and \c where. The first one can be used to convert the elements of
  a tuple from one type to another type. It is called like this:

  <code>castTo<T> ( a )</code>

  where \c T is the target type of the conversion, and \c a is a \c
  Tuple or a tuple expression. The \c castTo function returns a
  tuple expression that applies the <code>static_cast<T></code>
  operator to all the elements of the tuple argument. The elements of
  the returned tuple expression are of type \c T.

  Example:

  \code
  Tuple<float,2> a ( 1.0, 2.5 );
  Tuple<int,2>   b;

  b = castTo<int> ( a )
  \endcode

  which is the same as:

  \code
  Tuple<float,2> a ( 1.0, 2.5 );
  Tuple<int,2>   b;
  
  b[0] = static_cast<int> ( a[0] );
  b[1] = static_cast<int> ( a[1] );
  \endcode

  The function \c where mimicks the conditional operator
  <code>(?:)</code>. It is called as follows:

  <code>where ( mask, lhs, rhs )</code>

  where \c mask is a \c Tuple object or a tuple expression with
  elements of type \c bool. The arguments \c lhs and \c rhs should be
  \c Tuple objects, tuple expressions, scalars, or a combination of
  these. The \c where function returns a tuple expression that applies
  the conditional <code>(?:)</code> operator to all the elements of
  its three arguments. The elements of the tuple expression are of the
  same type as the elements of the tuple arguments and/or scalar
  arguments.

  Example:

  \code
  Tuple<float,2> a ( 1.0, 2.5 );
  Tuple<float,2> b;

  b = where ( a > 1.0, a, 0.0 );
  \endcode

  which is equivalent with:

  \code
  Tuple<float,2> a ( 1.0, 2.5 );
  Tuple<float,2> b;

  b[0] = ( a[0] > 1.0 ) ? a[0] : 0.0;
  b[1] = ( a[1] > 1.0 ) ? a[1] : 0.0;
  \endcode

  The funtions \c castTo and \c where are defined in the header
  file <code><jem/base/tuple/intrinsics.h></code>. They are also
  available through the general header file
  <code><jem/base/Tuple.h></code>.
  
*/



JEM_END_PACKAGE_BASE  
