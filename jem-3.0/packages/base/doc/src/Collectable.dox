
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


//=======================================================================
//  class Collectable
//=======================================================================

/*!
  \class Collectable Collectable.dox jem/base/Collectable.h

  \brief Provides support for automatic garbage collection.

  
  Objects derived from the \c Collectable class are subjected to
  automatic garbage collection. These \anchor CollectableObject
  <em>collectable objects</em> are created on the heap and are
  automatically deleted when they can no longer be reached from the
  program. It is not possible to delete collectable objects explicitly
  through a delete expression.

  Collectable objects are normally accessed through instances of the
  template class \c Ref that mimics the behavior of a pointer. As long
  as a collectable object can be reached through a \c Ref instance, or
  a sequence of \c Ref instances, that object will not be deleted.
  Although one can also access collectable objects through normal
  pointers, it is unspecified whether the existence of a route from a
  live pointer (i.e. a pointer that can be reached from the program)
  to a collectable object prevents the deletion of that object. This
  means that one can not be sure that a collectable object exists when
  it can only be reached through one or more normal pointers. This is
  also true for references to collectable objects.

  Collectable objects must be created with the template function \c
  newInstance() that mimics a new expression but returns a \c Ref
  object instead of a normal pointer. The \c newInstance() function
  can be supplied a variable number of arguments that will be passed
  on to the matching constructor of the collectable class. If the
  constructor throws an exception, \c newInstance() will deallocate
  all previously allocated memory and re-throw the exception, just
  like a new expression does. The following example shows how the \c
  newInstance function can be used.

  \code

  Ref<Boolean> b =               // Equivalent with:
    newInstance<Boolean>();      //   new Boolean();

  Ref<Float> f =                 // Equivalent with:
    newInstance<Float>( 0.5 );   //   new Float( 0.5 );
  
  \endcode

  The function \c newInstance() is not able to call a constructor that
  has one or more references (such as \c int&) in its argument
  list. Normally this is not a problem because a constructor will only
  rarely need to modify its arguments. If, however, this is a problem
  for you, use a pointer instead of a reference.

  A collectable object must not be created on the stack. To prevent
  this from accidentally happening, a collectable class should declare
  its destructor as a protected or private member.

  \note The current implementation of the \c Collectable class is
  based on a thread-safe reference counting scheme that does not work
  properly when collectable objects are referencing each other. For
  instance, if object \a A has a \c Ref to object \a B which has a \c
  Ref to object \a A, then both objects will never be deleted, even if
  they are no longer reachable from the program.

  \sa \c Ref, \c WeakRef.

*/


class Collectable
{
 protected:


//-----------------------------------------------------------------------
//   constructor & destructor
//-----------------------------------------------------------------------


/*!     

  \brief Creates an empty \c Collectable.

  Creates an empty \c Collectable.

*/

  Collectable ();


/*!

  \brief Frees resources.
   
  The destructor of a collectable object is called when the object is
  deleted. Since it is not specified when the object is deleted, one
  should not depend on the destructor to free critical system
  resources such as file descriptors.

  \note The destructor of a collectable object should be declared
  protected or private to prevent that such an object is created on
  the stack.

*/

  ~Collectable ();

};




JEM_END_PACKAGE_BASE
