
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


//=======================================================================
//   class RuntimeException
//=======================================================================

/*!
  \class RuntimeException RuntimeException.dox jem/base/RuntimeException.h

  \brief %Signals a runtime exception.
   
  An object of the class \c RuntimeException signals an error
  condition that should normally not occur in a correct program. Such
  an error condition is typically caused by a programming mistake or
  by a shortage of a system resource such as memory. Functions
  throwing a RuntimeException do not necessarily have to document this
  fact.

  If a \c RuntimeException is constructed when the environment
  variable \c JEM_ABORT_ON_EXCEPTION has been set, then the program is
  terminated by calling the standard function \c abort. This is useful
  if you want to create a core dump containing a trace of the call
  stack.

*/

class RuntimeException : public Throwable
{
 public:

/*!
  
  \brief Constructs a \c RuntimeException.
   
  Constructs a \c RuntimeException given a context and message string.
  If the environment variable \c JEM_ABORT_ON_EXCEPTION has been set,
  the program is aborted.

  \param place - a string describing the context in which this
  exception was thrown.

  \param msg - a string describing why this exception was thrown.

*/
    
  explicit RuntimeException ( const String& place = String(), 
                              const String& msg   = String() );

  
  virtual String  name () const;

};



JEM_END_PACKAGE_BASE
