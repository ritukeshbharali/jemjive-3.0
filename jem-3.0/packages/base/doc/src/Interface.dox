
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


//=======================================================================
//   class Interface
//=======================================================================

/*!
  \class Interface Interface.dox jem/base/Interface.h

  \brief Provides support for creating Java-like interfaces.

  The \c Interface class mimicks the <i>interface</i> data type
  provided by the Java programming language. You define an interface
  by defining a class that:

  \li is derived from the \c Interface class or one or more other
  interfaces;

  \li declares only pure virtual methods and static data members.

  Here is an example:

  \code
  class Executable : public Interface
  {
   public:

    virtual void  run() = 0;

   protected:

    virtual      ~Executable ();

  };
  \endcode

  An interface is implemented by defining a class that inherits the
  interface and the \c Object class, and implements all methods
  defined by the interface. Inheriting the \c Object class is not
  strictly necessary, but ensures that the class implementing the
  interface is compatible with many data structures and algorithms
  provided by Jem.

  Here is an example of a class implementing the interface defined
  above:

  \code
  class SimpleProgram : public Object, public Executable
  {
   public:

    virtual void run ();

    ...
  
  };
  \endcode

  There is nothing magic about the \c Interface class; you are free to
  define an interface that does not inherit the \c Interface
  class. However, by inheriting the \c Interface class you clearly
  indicate that a class is to be used as an interface.

  \note If the classes implementing an interface are all derived from
  the \c Collectable class, it is good practice to declare the
  destructor of the interface as a protected member. This ensures that
  a collectable object implementing the interface can not be deleted
  prematurely by means of a delete expression.

*/

class Interface
{
 protected:

//-----------------------------------------------------------------------
//   destructor
//-----------------------------------------------------------------------

/*!

  \brief Empty destructor.
  
  The destructor of the \c Interface class does nothing. It is only
  declared to ensure the destructor of derived classes is virtual.

*/

  virtual inline ~Interface ();


 private:


//-----------------------------------------------------------------------
//   disabled copy constructor & assignment operator
//-----------------------------------------------------------------------

/*!

  \brief Disabled copy constructor.

  The copy constructor of the \c Interface class does nothing. It is
  declared private to ensure that the \c Interface class can not be
  copied.

*/

  Interface ( const Interface& );


/*!

  \brief Disabled assignment operator.

  The assignment operator of the \c Interface class does nothing. It
  is declared private to ensure that \c Interface objects can not be
  copied (and so avoid `object slicing' errors).

*/

  Interface& operator = ( const Interface& );


};



JEM_END_PACKAGE_BASE
