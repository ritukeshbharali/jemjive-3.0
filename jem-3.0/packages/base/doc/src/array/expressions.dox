
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */

-
#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


/*!

  \page ArrayExpressions Array expressions

  Jem provides a set of overloaded operators and functions for writing
  expressions that operate on all elements of one or more
  arrays. These operators and functions return special array objects,
  called <em>array expressions</em>, that can be assigned to regular
  \c Array objects. Array expressions can also be passed to the
  overloaded operators and functions to create new array expressions.
  
  Here is an example:

  \code
  Array<double,2> a ( 10, 10 );
  Array<double,2> b ( 10, 10 );
  Array<double,2> c ( 10, 10 );
  
  // init a ...

  b = 1.0 + sin( a );
  c = a * a + pow( b, 2.0 );
  \endcode

  This code fragment is equivalent with:
  
  \code
  Array<double,2> a ( 10, 10 );
  Array<double,2> b ( 10, 10 );
  Array<double,2> c ( 10, 10 );

  int i, j;

  // init a ...

  for ( j = 0; j < 10; j++ )
  {
    for ( i = 0; i < 10; i++ )
    {
      b(i,j) = 1.0 + sin( a(i,j) );
    }
  }

  for ( j = 0; j < 10; j++ )
  {
    for ( i = 0; i < 10; i++ )
    {
      c(i,j) = a(i,j) * a(i,j) + pow( b(i,j), 2.0 );
    }
  }
  \endcode
  
  An array expression can be viewed as a compound object that
  comprises a set of operators and functions, and a set of
  operands. The latter set consists of \c Array objects, scalars and
  other array expression objects. For instance, the array expression
  <code>(1.0 + sin(a))</code> consists of the \c + operator, the
  scalar <code>1.0</code> and the array expression
  <code>sin(a)</code>. This last expression comprises the function \c
  sin and the \c Array object \c a.

  An array expression can also be viewed as a type of array that has
  the same shape as its operands. The elements of an array expression
  are obtained by applying its operators and functions to the elements
  of its operands. Thus, the element <i>(i,j)</i> of the array
  expression <code>(1.0 + sin(a))</code> equals <code>(1.0 +
  sin(a(i,j)))</code>. Note that this implies that all operators and
  functions are applied <em>element-wise</em>. This also implies that
  all operands of an array expression must have the same shape.

  If a scalar, such as \c 1.0, is one of the operands of an array
  expression, it is implicitly converted to an array-like object that
  has the same shape as the other operands involved in the array
  expression. The elements of this array-like object are all equal to
  the scalar.

  Array expressions come in two flavors: \em rvalue array expressions
  and \em lvalue array expressions. An rvalue expression can only be
  used as the right-hand side in an assignment statement or as the
  input parameter of a function. An lvalue array expression, on the
  other hand, can also be used as the left-hand side in an assignment
  statement and as the output parameters of a function. Note that an
  lvalue expression can also be used as an rvalue expression.

  Almost all overloaded functions and operators provided by jem create
  rvalue array expressions. At this time, only the \c select()
  function creates lvalue array expressions. For more information, see
  the page on \ref ArraySelections "array selections".

  The use of array expressions is often more efficient than writing a
  series of equivalent (nested) loops. One reason is that the
  implementation of array expressions is based on `expression
  templates', a technique that makes it possible to avoid creating
  temporary array objects (see the papers available at
  http://oonumerics.org for the details). Another reason is that array
  expressions collapse multiple nested loops into a single loop in the
  common case that all the operands are stored contiguously in
  memory. For instance, the statement

  \code
  b = 1.0 + sin(a);
  \endcode

  in the previous example will expand to:

  \code
  for ( i = 0; i < 100; i++ )
  {
    b.setFast( i, 1.0 + sin( a.getFast(i) ) );
  }
  \endcode

  The following sections provide an overview of the overloaded
  operators and functions that can be used to create array
  expressions.

  
  \section UnaryArrayOperators Unary operators

  <code>\#include <jem/base/array/operators.h></code> \b or <br>
  <code>\#include <jem/base/Array.h></code>.

  Supported unary operators:

  \li \c - (unary minus)
  \li \c ! (logical not)
  \li \c ~ (bitwise not)

  These operators can be called with either an \c Array object or an
  array expression. Each returns an rvalue array expression that
  applies the unary operator to the elements of the array
  argument. The elements of the array expression are of the same type
  as the elements of the array argument.

  The unary operators are defined in the header file
  <code><jem/base/array/operators.h></code>. They are also available
  through the general header file <code><jem/base/Array.h></code>.


  \section BinaryArrayOperators Binary operators

  <code>\#include <jem/base/array/operators.h></code> \b or <br>
  <code>\#include <jem/base/Array.h></code>.
  
  Supported binary arithmetic operators:

  \li \c + (addition)
  \li \c - (substraction)
  \li \c * (multiplication)
  \li \c / (division)
  \li \c % (modulo division)

  Supported binary bitwise operators:

  \li \c |  (bitwise or)
  \li \c ^  (bitwise xor)
  \li \c &  (bitwise and)
  \li \c << (left shift)
  \li \c >> (right shift)

  Supported binary logical operators:

  \li \c || (logical or)
  \li \c && (logical and)
  
  Supported comparison operators:

  \li \c <  (less than)
  \li \c <= (less equal)
  \li \c >  (greater than)
  \li \c >= (greater equal)
  \li \c == (equal)
  \li \c != (not equal)

  All the operators listed above can be called with two \c Array
  objects, two array expressions, or one \c Array object and one array
  expression. They can also be called with an \c Array object and a
  scalar, or an array expression and a scalar. They return an rvalue
  array expression that applies the operator to the elements of the
  array arguments and/or scalar argument. The elements of the array
  arguments and/or the scalar argument must be of the same type; one
  can not, for instance, add an integer array to a floating point
  array.

  All operators except the comparison operators return an array
  expression of which the elements are of the same type as the
  elements of the array arguments and/or scalar argument. The
  comparison operators return an array expression of which the
  elements are of type \c bool.

  The binary operators are defined in the header file
  <code><jem/base/array/operators.h></code>. They are also available
  through the general header file <code><jem/base/Array.h></code>.

  
  \section UnaryArrayFunctions Unary functions

  <code>\#include <jem/base/array/intrinsics.h></code> \b or <br>
  <code>\#include <jem/base/Array.h></code>.

  The following unary functions can be called with an \c
  Array object or an array expression:
  
  \li \c abs
  \li \c acos
  \li \c asin
  \li \c atan
  \li \c ceil
  \li \c cos
  \li \c cosh
  \li \c exp
  \li \c floor
  \li \c log
  \li \c log10
  \li \c sin
  \li \c sinh
  \li \c sqrt
  \li \c tan
  \li \c tanh

  Each function returns an rvalue array expression that applies the
  function to the elements of the array argument. The elements of the
  array expression are of the same type as the elements of the array
  argument.

  The unary functions listed above are defined in the header file
  <code><jem/base/array/intrinsics.h></code>. They are also available
  through the general header file <code><jem/base/Array.h></code>.

  
  \section BinaryArrayFunctions Binary functions

  <code>\#include <jem/base/array/intrinsics.h></code> \b or <br>
  <code>\#include <jem/base/Array.h></code>.

  The binary function \c pow can be called with two \c Array objects,
  two array expressions, or one \c Array object and one array
  expression. It can also be called with an \c Array object and a
  scalar, or an array expression and a scalar. The \c pow function
  returns an rvalue array expression that applies the \c pow function
  to all elements of the array arguments and/or scalar argument. The
  elements of the returned array expression are of the same type as
  the elements of the array arguments and/or scalar argument.

  The \c pow funtion is defined in the header file
  <code><jem/base/array/intrinsics.h></code>. It is also available
  through the general header file <code><jem/base/Array.h></code>.
  
  
  \section OtherArrayFunctions Other functions

  <code>\#include <jem/base/array/intrinsics.h></code> \b or <br>
  <code>\#include <jem/base/Array.h></code>.

  Two other functions that create rvalue array expressions are \c
  castTo and \c where. The first one can be used to convert the
  elements of an array from one type to another type. It is called
  like this:

  <code>castTo<T> ( a )</code>

  where \c T is the target type of the conversion, and \c a is an \c
  Array or an array expression. The \c castTo function returns an
  rvalue array expression that applies the <code>static_cast<T></code>
  operator to all the elements of the array argument. The elements of
  the returned array expression are of type \c T.

  Example:

  \code
  Array<float,2> a ( 10, 10 );
  Array<int,2>   b ( 10, 10 );

  // init a ...

  b = castTo<int> ( a )
  \endcode

  which is the same as:

  \code
  Array<float,2> a ( 10, 10 );
  Array<int,2>   b ( 10, 10 );
  
  int i, j;
  
  // init a ...

  for ( j = 0; j < 10; j++ )
  {
    for ( i = 0; i < 10; i++ )
    {
      b(i,j) = static_cast<int> ( a(i,j) );
    }
  }
  \endcode

  The function \c where mimicks the conditional operator
  <code>(?:)</code>. It is called as follows:

  <code>where ( mask, lhs, rhs )</code>

  where \c mask is an \c Array object or an array expression with
  elements of type \c bool. The arguments \c lhs and \c rhs should be
  \c Array objects, array expressions, scalars, or a combination of
  these. The \c where function returns an rvalue array expression that
  applies the conditional <code>(?:)</code> operator to all the
  elements of its three arguments. The elements of the array
  expression are of the same type as the elements of the array
  arguments and/or scalar arguments.

  Example:

  \code
  Array<float,2> a ( 10, 10 );
  Array<float,2> b ( 10, 10 );

  // init a ...

  b = where ( a > 1.0, a, 0.0 );
  \endcode

  which is equivalent with:

  \code
  Array<float,2> a ( 10, 10 );
  Array<float,2> b ( 10, 10 );

  int i, j;

  // init a ...

  for ( j = 0; j < 10; j++ )
  {
    for ( i = 0; i < 10; i++ )
    {
      b(i,j) = ( a(i,j) > 1.0 ) ? a(i,j) : 0.0;
    }
  }
  \endcode

  The funtions \c castTo and \c where are defined in the header
  file <code><jem/base/array/intrinsics.h></code>. They are also
  available through the general header file
  <code><jem/base/Array.h></code>.
  
*/



JEM_END_PACKAGE_BASE  
