
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


/*!
  <code>\#include <jem/base/Slice.h></code>

  \page ArraySlices Array slices

  The \c Array class provides overloaded subscript and function-call
  operators that can be used to select regular, rectangular sections
  of an array. These so-called slice operators return an <code>\link
  jem::Array Array\endlink</code> object that points to a sub-set of
  the data block pointed to by the \c Array object on which the slice
  operators are invoked. Because the returned array shares its data
  with the original array, all modifications to the returned array
  will be visible in the original one.

  The slice operators must be called with a set of \c Slice objects --
  created by calling the global <code>\link jem::Slice::slice()
  slice()\endlink</code> function -- that specify which indices should
  be selected in a particular dimension. For instance, if \c a is a
  three-dimensional array, then the expression

  <code>a( ALL, slice(2,5), slice(BEGIN,3) )</code>

  selects all indices in the first dimension; the indices
  <i>(2,3,4)</i> in the second dimension; and the indices
  <i>(0,1,2)</i> in the third dimension. The result of this expresion
  is therefore a three-dimensional \c Array object with shape
  <i>(a.size(0),3,3)</i>.

  A slice operator can also be called with a mix of <code>\link
  jem::Slice Slice\endlink</code> objects and integers. In this case
  the operator will return an \c Array object that has a lower rank
  than the \c Array object on which the operator is invoked. For
  instance, the expression

  <code>a( ALL, 2, slice(BEGIN,3) )</code>

  selects all indices in the first dimension; the single index
  <i>2</i> in the second dimension; and the indices <i>(0,1,2)</i> in
  the third dimension. The result of this expression is therefore a
  two-dimensional array with shape <i>(a.size(0),3)</i>.

  Here are some more examples:

  \code
  Array<int,3>  a ( 10, 10, 10 );
  Array<int,2>  b (      5,  2 );
  Array<int>    c (          5 );
  Array<int>    d (          2 );

  // init a, b, c, d ...

  b = a( slice(ALL,2), slice(8,END), 5 );
  c = b( ALL, 1 );
  d = c[ slice(1,END,2) ];
  \endcode

  After execution of this code fragment, the following expressions
  will be true for all valid indices <i>(i,j)</i>:

  \code
  b(i,j) == a(2 * i, 8 + j, 5 );
  c[i]   == b(i,1);
  d[i]   == c[1 + 2 * i];
  \endcode

  Note that the function call operator is used for multi-dimensional
  arrays and that the subscript operator is used for one-dimensional
  arrays.

  \sa <code>\link jem::Slice::slice() slice()\endlink</code>,
  <code>\link jem::Slice Slice\endlink</code>

*/



JEM_END_PACKAGE_BASE
