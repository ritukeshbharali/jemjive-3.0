
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


/*!

  \defgroup ArraySelections Array selections

  \brief Functions for selecting non-regular sections of an array.

  <code>\#include <jem/base/array/select.h></code>

  This header file exports the \c select() function that can be used
  to select non-regular, rectangular sections of <code>\link
  jem::Array Array\endlink</code> objects and array expressions. This
  function is especially handy when writing code that uses an index
  array to access the elements in an \c Array or an array expression.

  An example:

  \code
  Array<double,2>  matrix ( 10, 100 );
  Array<int>       index  (       3 );

  // ... (initialize the array matrix) ...

  index[0] = 2; index[1] = 6; index[2] = 7;

  select( matrix, index, slice(ALL) ) = 1.0;
  \endcode

  The above select statement is equivalent with:

  \code
  int i, j;

  for ( j = 0; j < 100; j++ )
  {
    for ( i = 0; i < 3; i++ )
    {
      matrix( index[i], j ) = 1.0;
    }
  }
  \endcode
  
  Although the \c select function provides a similar functionality as
  the slice operators of the \c Array class, they differ in three
  ways. First, the \c select function returns array expressions
  whereas the overloaded slice operators return \c Array
  objects. Second, the \c select function can be used to select
  non-regular sections of an array, while the slice operators can only
  be used to select regular sections of an array. Third, the \c select
  function always returns an array expression that has the same rank
  as the original array. The slice operators, on the other hand, can
  return an \c Array object that has a lower rank than the original
  array.

  Note that the \c select() function is also available through the
  general header file <code><jem/base/Array.h></code>.

  \sa \ref ArraySlices

*/


//@{


//-----------------------------------------------------------------------
//   select (one dimensional arrays)
//-----------------------------------------------------------------------

/*!

  \brief Selects a section of a one-dimensional array.

  Returns a one-dimensional array expression representing a
  rectangular section of the one-dimensional array expression \a
  a. The parameter \a idx specifies which elements are selected. This
  parameter can be a \c Slice instance (or an instance of a class
  derived from \c Slice), an \c Array<int> object, or a
  one-dimensional array expression of which the elements have type \c
  int. If the parameter \a idx is a \c Slice, this function returns an
  array expression representing the elements selected by the \c Slice
  object. Otherwise, this function returns an array expression
  representing the elements indexed by the array object or the array
  expression \a idx.

  The returned array expression has the same flavor as the parameter
  \a a. That is, the returned expression is an rvalue expression if \a
  a is an rvalue expression, and an lvalue expression if \a a is an
  lvalue expression. The size of the returned expression is equal to
  the number of elements selected by the parameter \a idx.

  Here is an example:

  \code
  Array<float>  a   ( 30 );
  Array<float>  b   ( 20 );
  Array<int>    idx ( 10 );

  // init a, b, idx ...

  select( a, idx + 2 ) = select( b, slice(2,12) );
  \endcode

  The last statement is equivalent with:

  \code
  int i;

  for ( i = 0; i < 10; i++ )
  {
    a[ idx[i] + 2 ] = b[ i + 2 ];
  }
  \endcode

  \param a - an array expression or an \c Array object.

  \param idx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \pre If \a idx is an array or an array expression, then: <br>
  <code>idx[i] >= 0 && idx[i] < a.size()</code>            <br>
  for all valid indices \a i.

  \return A one-dimensional array expression that represents a
  rectangular section of the array expression \a a.

*/


template <class T, class I>
  ArrayExpr<T,1> select ( const ArrayExpr<T,1>& a,
                          const I&              idx );


//-----------------------------------------------------------------------
//   select (two-dimensional arrays)
//-----------------------------------------------------------------------

/*!

  \brief Selects a section of a two-dimensional array.

  Returns a two-dimensional array expression representing a
  rectangular section of the two-dimensional array expression \a
  a. The parameters \a idx and \a jdx specify the selected array
  indices in the first and second dimension, respectively. Each
  parameter can be a \c Slice instance (or an instance of a class
  derived from \c Slice), an \c Array<int> object, or a
  one-dimensional array expression of which the elements have type \c
  int.

  The returned array expression has the same flavor as the parameter
  \a a. That is, the returned expression is an rvalue expression if \a
  a is an rvalue expression, and an lvalue expression if \a a is an
  lvalue expression. The returned expression has shape <i>(m,n)</i>
  with <i>m</i> the number of indices selected by \a idx, and
  <i>n</i> the number of indices selected by \a jdx.

  Here is an example:

  \code
  Array<float,2>  a   ( 40, 40 );
  Array<float,2>  b   ( 30, 30 );
  Array<int>      idx (     20 );
  Array<int>      jdx (     10 );

  // init a, b, idx, jdx ...

  select( a, idx + 2, slice(2,12) ) = select( b, slice(2,22), 2 * jdx );
  \endcode

  The last statement is equivalent with:

  \code
  int i, j;

  for ( j = 0; j < 10; j++ )
  {
    for ( i = 0; i < 20; i++ )
    {
      a( idx[i] + 2, j + 2 ) = b( i + 2, 2 * jdx[j] );
    }
  }
  \endcode

  \param a - an array expression or an \c Array object.

  \param idx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \param jdx - a \c Slice, an \c Array<int> object, or array
  expression of which the elements have type \c int.

  \pre
    If \a idx is an array or array expression, then:     <br>
    <code>idx[i] >= 0 && idx[i] < a.shape()[0]</code>    <br>
    for all valid indices \a i;                          <br>
    and if \a jdx is an array or array expression, then: <br>
    <code>jdx[i] >= 0 && jdx[i] < a.shape()[1]</code>    <br>
    for all valid indices \a i.
  

  \return A two-dimensional array expression that represents a
  rectangular section of the array expression \a a.

*/


template <class T, class I, class J>
  ArrayExpr<T,2> select ( const ArrayExpr<T,2>& a,
                          const I&              idx,
                          const J&              jdx );


//-----------------------------------------------------------------------
//   select (three-dimensional array)
//-----------------------------------------------------------------------

/*!

  \brief Selects a section of a three-dimensional array.

  Returns a three-dimensional array expression representing a
  rectangular section of the three-dimensional array expression \a
  a. The parameters \a idx, \a jdx and \a kdx specify the selected
  array indices in the first, second and third dimension,
  respectively. Each parameter can be a \c Slice instance (or an
  instance of a class derived from \c Slice), an \c Array<int> object,
  or a one-dimensional array expression of which the elements have
  type \c int.

  The returned array expression has the same flavor as the parameter
  \a a. That is, the returned expression is an rvalue expression if \a
  a is an rvalue expression, and an lvalue expression if \a a is an
  lvalue expression. The returned expression has shape <i>(m,n,p)</i>
  with \a m, \a n and \a p the number of indices selected by \a idx,
  \a jdx and \a kdx, respectively.

  Here is an example:

  \code
  Array<float,2>  a   ( 50, 50, 50 );
  Array<float,2>  b   ( 40, 40, 40 );
  Array<int>      idx (         30 );
  Array<int>      jdx (         20 );
  Array<int>      kdx (         10 );

  // init a, b, idx, jdx, kdx ...

  select( a, idx, slice(2,22), kdx + 2 ) =
  select( b, slice(2,32), jdx, kdx - 2 );
  \endcode

  The last statement is equivalent with:

  \code
  int i, j, k;

  for ( k = 0; k < 10; k++ )
  {
    for ( j = 0; j < 20; j++ )
    {
      for ( i = 0; i < 30; i++ )
      {
        a( idx[i], j + 2, kdx[k] + 2 ) =
        b( i + 2, jdx[j], kdx[k] - 2 );
      }
    }
  }
  \endcode

  \param a - an array expression or an \c Array object.

  \param idx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \param jdx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \param kdx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \pre
    If \a idx is an array or array expression, then:     <br>
    <code>idx[i] >= 0 && idx[i] < a.shape()[0]</code>    <br>
    for all valid indices \a i;                          <br>
    and if \a jdx is an array or array expression, then: <br>
    <code>jdx[i] >= 0 && jdx[i] < a.shape()[1]</code>    <br>
    for all valid indices \a i;                          <br>
    and if \a kdx is an array or array expression, then: <br>
    <code>kdx[i] >= 0 && kdx[i] < a.shape()[2]</code>    <br>
    for all valid indices \a i.
  
  \return A three-dimensional array expression that represents a
  rectangular section of the array expression \a a.

*/

template <class T, class I, class J, class K>
  ArrayExpr<T,3> select ( const ArrayExpr<T,3>& a,
                          const I&              idx,
                          const J&              jdx,
                          const K&              kdx );


//-----------------------------------------------------------------------
//   select (four-dimensional arrays)
//-----------------------------------------------------------------------

/*!

  \brief Selects a section of a four-dimensional array.

  Returns a four-dimensional array expression representing a
  rectangular section of the four-dimensional array expression \a
  a. The parameters \a idx, \a jdx, \a kdx and \a ldx specify the
  selected array indices in the first, second, third and fourth
  dimension, respectively. Each parameter can be a \c Slice instance
  (or an instance of a class derived from \c Slice), an \c Array<int>
  object, or a one-dimensional array expression of which the elements
  have type \c int.

  The returned array expression has the same flavor as the parameter
  \a a. That is, the returned expression is an rvalue expression if \a
  a is an rvalue expression, and an lvalue expression if \a a is an
  lvalue expression. The returned expression has shape
  <i>(m,n,p,q)</i> with \a m, \a n, \a p and \a q the number of
  indices selected by \a idx, \a jdx, \a kdx, \a ldx, respectively.

  Here is an example:

  \code
  Array<float,2>  a   ( 60, 60, 60, 60 );
  Array<float,2>  b   ( 50, 50, 50, 50 );
  Array<int>      idx (             40 );
  Array<int>      jdx (             30 );
  Array<int>      kdx (             20 );
  Array<int>      ldx (             10 );

  // init a, b, idx, jdx, kdx, ldx ...

  select( a, idx, slice(2,32), kdx + 2, slice(2,12) ) =
  select( b, slice(2,42), jdx, kdx - 2, 2 * ldx + 2 );
  \endcode

  The last statement is equivalent with:

  \code
  int i, j, k, l;

  for ( l = 0; l < 10; l++ )
  {
    for ( k = 0; k < 20; k++ )
    {
      for ( j = 0; j < 30; j++ )
      {
        for ( i = 0; i < 40; i++ )
        {
          a( idx[i], j + 2, kdx[k] + 2, l + 2 ) =
          b( i + 2, jdx[j], kdx[k] - 2, 2 * ldx[l] + 2 );
        }
      }
    }
  }
  \endcode

  \param a - an array expression or an \c Array object.

  \param idx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \param jdx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \param kdx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \param ldx - a \c Slice, an \c Array<int> object, or an array
  expression of which the elements have type \c int.

  \pre
    If \a idx is an array or array expression, then:     <br>
    <code>idx[i] >= 0 && idx[i] < a.shape()[0]</code>    <br>
    for all valid indices \a i;                          <br>
    and if \a jdx is an array or array expression, then: <br>
    <code>jdx[i] >= 0 && jdx[i] < a.shape()[1]</code>    <br>
    for all valid indices \a i;                          <br>
    and if \a kdx is an array or array expression, then: <br>
    <code>kdx[i] >= 0 && kdx[i] < a.shape()[2]</code>    <br>
    for all valid indices \a i;                          <br>
    and if \a kdx is an array or array expression, then: <br>
    <code>ldx[i] >= 0 && ldx[i] < a.shape()[3]</code>    <br>
    for all valid indices \a i;
  
  \return A four-dimensional array expression that represents a
  rectangular section of the array expression \a a.

*/

template <class T, class I, class J, class K, class L>
  ArrayExpr<T,4> select ( const ArrayExpr<T,4>& a,
                          const I&              idx,
                          const J&              jdx,
                          const K&              kdx,
                          const L&              ldx );


//@}


JEM_END_PACKAGE_BASE
