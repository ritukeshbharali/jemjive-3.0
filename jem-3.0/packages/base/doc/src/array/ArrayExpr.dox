
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


//=======================================================================
//   class ArrayExpr
//=======================================================================


/*!
  \class ArrayExpr ArrayExpr.dox jem/base/array/ArrayExpr.h

  \brief A dummy class representing array expressions.

  The class \c ArrayExpr is a \em fictitious class that represents
  \ref ArrayExpressions "array expressions". The template parameter \a
  T denotes the type of the elements of the array expression, while
  the template parameter \a N denotes the rank of the array
  expression. For instance, if \c a and \c b are both arrays of type
  \c Array<float,3>, then the expression <code>(a + b)</code> is
  represented by the class \c ArrayExpr<float,3>.

  The \c ArrayExpr class is used in this documentation to indicate
  that a function accepts an array expression as one of its arguments.
  For instance, the declaration

  \code
  template <class T, int N>
    void min ( const ArrayExpr<T,N>& e );
  \endcode

  indicates that the function \c min can be called with any array
  expression of which the elements have type \c T, and of which
  the rank is \c N. Thus, <code>min(a + b)</code> is a valid
  function call.

  The \c ArrayExpr class is conceptually (but not in reality!) a base
  class of the \c Array class. This means that an \c Array object can
  be passed to any function expecting an array expression. Thus,
  <code>min(a)</code> is also a valid function call.

  The \c ArrayExpr class represents both \em rvalue expressions and
  \em lvalue expressions. An rvalue expression can only be used as a
  data source, while an lvalue expression can also be used as a data
  sink. This means that an rvalue expression can only be used as the
  right-hand side of an assignment and as the input parameter of a
  function. An lvalue expression, on the other hand, can also be used
  as the left-hand side of an assignment and as an output parameter of
  a function. Note that an lvalue expression is also an rvalue
  expression.

  \sa \c Array, \ref ArrayExpressions.

*/

template <class T, int N>
  class ArrayExpr
{
 public:

//-----------------------------------------------------------------------
//   typedefs
//-----------------------------------------------------------------------

/*!

  \brief A type representing the shape of an array expression.

  The \c Shape type represents the shape of an array expression. It is
  an alias for \c Tuple<int,N>.

*/

  typedef Tuple<int,N> Shape;


//-----------------------------------------------------------------------
//   assignment operators
//-----------------------------------------------------------------------

/*!

  \brief Copies an rvalue array expression.

  Assigns the values of the elements of the rvalue array expression \a
  rhs to the corresponding elements represented by this array
  expression.

  \param rhs - an rvalue array expression or an \c Array object.

  \pre
    <code>equal( this->shape(), rhs.shape() )</code> <br>
    and this array expressions is an lvalue expression, <br>
    and the type \a T provides an assignment operator.

  \return \c *this

*/

  const ArrayExpr<T,N>& operator = ( const ArrayExpr<T,N>& rhs ) const;


/*!

  \brief Sets all elements to a specified value.

  Assigns all elements represented by this array expression to the
  value \a rhs.

  \param rhs - an object of type \a T.

  \pre
    This array expression is an lvalue expression,
    and the type \a T provides an assignment operator.

  \return \c *this

*/

  const ArrayExpr<T,N>& operator = ( const T& rhs ) const;
  

//-----------------------------------------------------------------------
//   size
//-----------------------------------------------------------------------

/*!

  \brief Returns the size of a one-dimensional array expression.

  Returns the size of a one-dimensional array expression. This
  function does not exist for multi-dimensional array expressions.

  \return <code>this->shape()[0]</code>

*/

  inline int size () const;


//-----------------------------------------------------------------------
//   shape
//-----------------------------------------------------------------------

/*!

  \brief Returns the shape of this array expression.

  Returns the shape of this array expression. It is equal to the shape
  of the operands of this array expression.

  \return The shape of this array expression.

*/

  inline Shape shape () const;

};



JEM_END_PACKAGE_BASE
