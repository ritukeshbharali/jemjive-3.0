
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE


//=======================================================================
//   class Slice
//=======================================================================

/*!
  \class Slice Slice.dox jem/base/Slice.h

  \brief Selects parts of array-like objects.

  \c Slice objects are used to select parts of arrays, strings, and
  other array-like objects. Such a selection, or \em slice, is defined
  by three integers: a begin index, an end index and a stride. The
  begin index is a non-negative integer that points to the first
  element in the slice. The end index is an integer that points one
  position past the last element in the slice; it is always larger
  than or equal to the begin index. The stride is a positive integer
  that specifies the distance between two consecutive elements in the
  slice. For instance, if the stride is three, a slice contains only
  each third element of an array-like object. If the stride equals
  one, the slice is said to be contiguous.

  The precise definition of a slice is as follows. Let <i>s</i>
  represent a slice of an array-like object <i>a</i>, and let
  <i>first</i>, <i>last</i> and <i>stride</i> denote the begin index,
  end index and stride, respectively. The elements of the slice are
  then given by:

  <i> s[i] = a[first + i * stride] </i> 

  for all <i>i</i> for which the following condition is true:

  <i> first <= first + i * stride < last </i>

  The begin index, end index and stride must select a valid --
  possibly empty -- set of elements from an array-like object. To be
  precise, the following conditions should be met:

  <i> 0 <= first <= n and first <= last and stride > 0 </i>

  where <i>n</i> denotes the length of the array <i>a</i>. The end
  index may be larger than the size of the array; it will be
  automatically adjusted so that it becomes less than or equal to the
  size of the array. In this way one can easily create a slice that
  extends to the end of an array-like object.

  Slices are created by invoking the so-called \em slice \em operator
  of an array-like object. This operator is a member function --
  usually an overloaded subscripting or function call operator -- that
  accepts a single \c Slice object and returns an object representing
  part of the array-like object. The \c String class, for instance,
  provides an overloaded version of the subscripting operator that
  returns a sub-string for a given \c Slice object.

  \c Slice objects are normally constructed by calling the non-member
  function \c slice(), which is overloaded for several types of slices
  (contiguous and non-contiguous slices, for instance). These
  functions may be passed instances of the special classes \c Begin
  and \c End to create slices that start at the beginning of an array,
  extend to the end of an array, or include all elements of an array.
  For convenience, there are two pre-defined instances of these
  classes which are named \c BEGIN and \c END, respectively. There
  also exists a constant named \c ALL (of type \c SliceAll) than can
  be used to select all elements in an array.

  The following example demonstrates how the \c slice() function can
  be used.

  \code
  
    String a ( "Hello there!" );
    String s;
  
    s = a[ slice(1,5)     ];    // s == "ello"
    s = a[ slice(1,8,2)   ];    // s == "el h"
    s = a[ slice(BEGIN,5) ];    // s == "Hello"
    s = a[ slice(6,END)   ];    // s == "there!"
    s = a[ slice(ALL,2)   ];    // s == "Hlotee"
  
  \endcode
  
  Most versions of the overloaded \c slice() function do not return an
  instance of the \c Slice class but an instance of a derived
  class. These derived classes identify special types of slices, such
  as contiguous slices, and are used to select an optimized version of
  the slice operator at compile time. For instance, the \c String
  class provides an overloaded slice operator for \c SliceFrom
  objects that takes advantage of the fact that the begin index
  of a \c SliceFrom equals zero.

  \sa \c slice(), \c All, \c Begin, \c End, \c Array, \c String.

*/

class Slice
{
 public:

//-----------------------------------------------------------------------
//   MAX_INDEX
//-----------------------------------------------------------------------

/*!
   
  \brief The largest representable integer.
  
  The constant \c MAX_INDEX has the value of the largest representable
  integer. It can be used to construct a slice that extends to the end
  of an array-like object.

*/

  static const int MAX_INDEX;


//-----------------------------------------------------------------------
//   constructors
//-----------------------------------------------------------------------

/*!

  \brief Creates an empty Slice.
   
  Creates a \c Slice object with a begin index, end index and stride
  that are equal to zero.

  \post <code>
    this->first()  == 0 && <br>
    this->last()   == 0 && <br>
    this->stride() == 1
  </code>

*/

  inline Slice ();


/*! 

  \brief Constructs a \c Slice with a given begin index, end index and
  stride.
   
  Constructs a Slice with begin index \a first, end index \a last and
  stride \a stride.

  \param first - the begin index.

  \param last - the end index.

  \param stride - the stride.

  \pre <code>
    first >= 0     && <br>
    last  >= first && <br>
    stride > 0
  </code>

  \post <code>
    this->first()  == first && <br>
    this->last()   == last  && <br>
    this->stride() == stride &&
  </code>

*/

  inline Slice ( int first, int last, int stride = 1 );


//-----------------------------------------------------------------------
//   first
//-----------------------------------------------------------------------

/*!

  \brief Returns the begin index.
     
  \return The begin index of this \c Slice.
*/

  inline int first () const;
 

//-----------------------------------------------------------------------
//   last
//-----------------------------------------------------------------------

/*!

  \brief Returns the end index.
   
  \return The end index of this \c Slice.
*/

  inline int last () const;


/*!

  \brief Returns a clipped end index.
   
  \return <code>min ( ubound, last() )</code>
*/

  inline int last ( int ubound ) const;


//-----------------------------------------------------------------------
//   stride
//-----------------------------------------------------------------------

/*!

  \brief Returns the stride.
   
  \return The stride of this \c Slice.
*/

  inline int stride () const;
  
};


//=======================================================================
//   class SliceFromTo
//=======================================================================

/*!
  \class SliceFromTo Slice.dox jem/base/Slice.h

  \brief A class for creating contiguous slices of array-like objects.

  A \c SliceFromTo is basically a \c Slice object with the following
  properties:

  - <i> 0 <= first <= last </i>
  - <i> 0 <= last  <= n    </i>
  - <i> stride == 1        </i>

  with <i>first</i>, <i>last</i> and <i>stride</i> denoting the begin
  index, end index and stride, respectively, and with <i>n</i>
  denoting the size of the array-like object from which a slice is to
  be taken. In other words, the end index of a \c SliceFromTo object
  may not be larger than the size of the array-like object. This
  property makes it possible for array-like objects to implement fast
  slice operators that do not have to truncate the end index to the
  size of the array-like object.
  
  Note that the \c SliceFromTo will not be able check whether the end
  index is valid; it is your responsibility to create \c SliceFromTo
  objects with a valid end index.

  A \c SliceFromTo is normally created by calling the global,
  non-member function \c slice().

  \sa \c slice().

*/

class SliceFromTo : public Slice
{
 public:

/*!

  \brief Creates a \c SliceFromTo with a given begin index and end
  index.

  Creates a \c SliceFromTo with begin index \a first and end
  index \a last.

  \param first - the begin index.

  \param last - the end index.

  \pre <code>
    first >= 0  && <br>
    last  >= first
  </code>

  \post <code>
    this->first()  == first && <br>
    this->last()   == last  && <br>
    this->stride() == 1
  </code>

*/

  inline SliceFromTo ( int first, int last );

};


//=======================================================================
//   class SliceTo
//=======================================================================

/*!
  \class SliceTo Slice.dox jem/base/Slice.h

  \brief A class for creating a contiguous slice that starts at the
  beginning of an array-like object.

  A \c SliceTo is basically a \c SliceFromTo with a begin index equal
  to zero. A \c SliceTo is normally created by calling the global
  function \c slice().

  \sa \c slice().

*/

class SliceTo : public SliceFromTo
{
 public:

/*!

  \brief Creates a \c SliceTo with a given end index.

  Creates a \c SliceTo with a given end index. The end index may not
  be larger than the size of the array-like object from which a slice
  is to be taken.

  \param last - the end index.

  \pre <code>last >= 0</code>

  \post <code>
    this->first()  == 0    && <br>
    this->last()   == last && <br>
    this->stride() == 1
  </code>

*/

  inline SliceTo ( int last );

};


//=======================================================================
//   class SliceFrom
//=======================================================================

/*!
  \class SliceFrom Slice.dox jem/base/Slice.h

  \brief A class for creating a contiguous slice that extends to the
  end of an array-like object.

  A \c SliceFrom is basically a Slice with an end index equal to \c
  Slice::MAX_INDEX and a stride equal to one. A \c SliceFrom is
  normally created by calling one of the global function \c slice().

  \sa \c slice().
*/

class SliceFrom : public Slice
{
 public:

/*!

  \brief Creates a \c SliceFrom with a given begin index.

  Creates a SliceFrom with a given begin index.

  \param first - the begin index.

  \pre <code>first >= 0</code>

  \post <code>
    this->first()  == first           && <br>
    this->last()   == Slice::MAX_INDEX && <br>
    this->stride() == 1
  </code>

*/

  inline SliceFrom ( int first );

};


//=======================================================================
//   class SliceAll
//=======================================================================

/*!
  \class SliceAll Slice.dox jem/base/Slice.h

  \brief A class for creating a contiguous slice that contains all
  elements of an array-like object.

  A \c SliceAll is basically a \c SliceFrom with a begin index equal
  to zero. It is primarily used to take slices out of
  multi-dimensional arrays. For one-dimensional arrays it is not very
  useful. For convenience, there exists a pre-defined instance of this
  class, named \c ALL, that can be passed directly to a slice
  operator.

  \sa \c slice(), \c Array.

*/

class SliceAll : public SliceFrom
{
 public:


/*!

  \brief Creates a new \c SliceAll instance.

  Creates a new \c SliceAll instance.

  \post <code>
    this->first()  == 0                && <br>
    this->last()   == Slice::INIFINITY && <br>
    this->stride() == 1
  </code>

*/

  inline SliceAll ();

};


//-----------------------------------------------------------------------
//   class Begin
//-----------------------------------------------------------------------

/*!
  \class Begin Slice.dox jem/base/Slice.h

  \brief An empty class that facilitates the construction of slices.

  Instances of the class \c Begin can be passed to the global function
  \c slice() to create slices that start at the beginning of an
  array-like object. There exists one pre-defined instance of this
  class that is named \c BEGIN.

  \sa \c slice(), \c All, \c End.
*/

class Begin {};


//-----------------------------------------------------------------------
//   class End
//-----------------------------------------------------------------------

/*!
  \class End Slice.dox jem/base/Slice.h

  \brief An empty class that facilitates the construction of slices.

  Instances of the class \c End can be passed to the global function
  \c slice() to create slices that extend to the end of an array-like
  object. There exists one pre-defined instance of this class that is
  named \c END.

  \sa \c slice(), \c All, \c Begin.
*/

class End {};


//=======================================================================
//   related functions
//=======================================================================

/*!
  \name Slice construction functions.
*/

//@{

/*!
  \relates Slice

  \brief Constructs a \c SliceFrom object with a given begin index
  and end index.

  Returns a \c SliceFromTo object with a given begin index and end
  index. Note that the end index may not be larger than the size of
  the array-like object from which a slice is to be taken.

  \param first - the begin index.
  \param last  - the end index.

  \return <code> SliceFromTo ( first, last ) </code>
*/

inline SliceFromTo slice ( int first, int last );


/*!
  \relates Slice

  \brief Constructs a \c Slice object with a given begin index, end
  index and stride.

  Returns a \c Slice object with a given begin index, end index and
  stride. Note that the end index is allowed to be larger than the
  size of the array-like object from which a slice is to be taken.

  \param first  - the begin index.
  \param last   - the end index.
  \param stride - the stride.

  \return <code> Slice ( first, last, stride ) </code>
*/

inline Slice slice ( int first, int last, int stride );


/*!
  \relates Slice

  \brief Constructs a \c SliceTo object with a given end index.

  Returns a \c SliceTo object with a given end index. Note that the
  end index may not be larger than the size of the array-like object
  from which a slice is to be taken.

  \param last - the end index.

  \return <code> SliceTo ( last ) </code>
*/

inline SliceTo slice ( Begin, int last );


/*!
  \relates Slice

  \brief Constructs a \c Slice object with a given end index and
  stride.

  Returns a \c Slice object with a given end index and stride. Note
  that the end index is allowed to be larger than the size of the
  array-like object from which a slice is to be taken.

  \param last   - the end index.
  \param stride - the stride.

  \return <code> Slice ( 0, last, stride ) </code>
*/

inline Slice slice ( Begin, int last, int stride );


/*!
  \relates Slice

  \brief Constructs a \c SliceFrom object with a given begin index.

  Returns a \c SliceFrom object with a given begin index.

  \param first - the begin index.

  \return <code> SliceFrom ( first ) </code>
*/

inline SliceFrom slice ( int first, End );


/*!
  \relates Slice

  \brief Constructs a \c Slice object with a given begin index and
  stride.

  Returns a \c Slice object with a given begin index and stride.

  \param first  - the begin index.
  \param stride - the stride.

  \return <code> Slice ( first, Slice::MAX_INDEX, stride ) </code>
*/

inline Slice slice ( int first, End, int stride );


/*!
  \relates Slice

  \brief Returns a \c SliceAll object.

  Returns \c ALL (the pre-defined instance of type \c SliceAll).

  \return <code> ALL </code>
*/

inline const SliceAll& slice ( Begin, End );


/*!
  \relates Slice

  \brief Constructs a \c Slice object with a given stride.

  Returns a \c Slice object with a given stride.

  \param stride - the stride.

  \return <code> Slice ( 0, Slice::MAX_INDEX, stride ) </code>
*/

inline Slice slice ( Begin, End, int stride );


/*!
  \relates Slice

  \brief Returns a \c SliceAll object.

  Simply returns its argument.

  \param all - an instance of type \c SliceAll.

  \return <code> all </code>
*/

inline const SliceAll& slice ( const SliceAll& all );


/*!
  \relates Slice

  \brief Constructs a \c Slice object with a given stride.

  Returns a \c Slice object with a given stride. Note that the first
  argument is not used; it is only declared for overloading purposes.

  \param all - a reference to a \c SliceAll object (not used).

  \param stride - the stride.

  \return <code> Slice ( 0, Slice::MAX_INDEX, stride ) </code>
*/

inline Slice slice ( const SliceAll& all, int stride );


//@}


JEM_END_PACKAGE_BASE
