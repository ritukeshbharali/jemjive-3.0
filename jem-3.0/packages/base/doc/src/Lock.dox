
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE
  

//-----------------------------------------------------------------------
//   class Lock
//-----------------------------------------------------------------------

/*!
  \class Lock Lock.dox jem/base/Lock.h

  \brief Locks and unlocks mutual exclusion objects.
   
  The class \c Lock can be instantiated for all types \a M that
  declare the member functions \c lock() and \c unlock(). Here is an
  example:

  \code
   
  Mutex mutex;
     
  // ...
     
  {
    Lock<Mutex> lock( mutex );
       
    // execute atomic operations here
  }
     
  \endcode
   
  Because the destructor of the \c Lock class automatically unlocks
  the mutual exclusion object, it allows one to lock such an object in
  an exception safe way.
   
  \sa \c Monitor, \c Mutex, \c ReadWriteMutex, \c RecursiveMonitor, \c
  RecursiveMutex.

*/


template <class M>
  class Lock
{
 public:
  
//-----------------------------------------------------------------------
//   constructor
//-----------------------------------------------------------------------

/*!
 
  \brief Locks a mutual exclusion object.
   
  The constructor of the \c Lock class locks a mutual exclusion object
  by calling its \c lock() member function. The constructor casts away
  the constness of the mutual exclusion variable so that the \c lock()
  member does not have to be declared const. The reason for declaring
  the parameter \a mutex as const is that a lock/unlock pair does not
  logically change the state of the mutex.
   
  \param mutex - the mutual exclusion object to be locked. The
  lifetime this object must exceed the lifetime of this \c Lock
  object.

*/

  explicit inline Lock ( const M& mutex );
  
 
//-----------------------------------------------------------------------
//   destructor
//-----------------------------------------------------------------------

/*!
  
  \brief Unlocks the mutual exclusion object.
   
  The destructor of the \c Lock class calls the \c unlock() member of
  the mutual exclusion object that was passed as the parameter \a
  mutex in the constructor.

*/

  inline ~Lock ();

};




JEM_END_PACKAGE_BASE
