
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE_BASE

//=======================================================================
//  class Ref
//=======================================================================

/*!
  \class Ref Collectable.dox jem/base/Ref.h
  
  \brief Provides `safe' access to a collectable object.

  The template class \c Ref encapsulates a pointer of type \a T* that
  points to a \ref CollectableObject "collectable object". Unlike a
  normal pointer, however, a \c Ref instance guarantees that the
  collectable object is not deleted. That is, the collectable object
  will not be deleted as long as it can be reached through one or more
  Ref instances.

  A \c Ref that contains a \c NULL pointer is said to have the value
  \c NIL. To be precise, \c NIL is a pre-defined instance of the class
  \c Nil. Because several members of the \c Ref class have been
  overloaded for an argument of type \c Nil, one can use \c NIL as a
  special \c Ref object. Example:

  \code

  Ref<Object> obj = NIL;

  if ( obj == NIL )
  {
    throw NullPointerException ();
  }

  \endcode

  A \c Ref can point to any object as long as the \em runtime type of
  the object is unambiguously derived from the \c Collectable
  class. This means that the type \a T does not have to be derived
  from the \c Collectable class. Example:

  \code

  class Foo { ... };
  
  class Bar : public Foo, public Collectable { ... };

  ...

  Ref<Bar>  bar = newInstance<Bar>();
  Ref<Foo>  foo = bar;                 // OK: the runtime type of
                                       //     foo is Bar.

  \endcode

  \sa \c WeakRef.

*/


template <class T>
  class Ref
{
 public:


//-----------------------------------------------------------------------
//   constructors
//-----------------------------------------------------------------------

/*!

  \brief Constructs a \c Ref with the value \c NIL.

  Constructs a Ref with the value \c NIL.

  \post <code>
    *this       == NIL && <br>
    this->get() == NULL
  </code>

*/

  inline Ref ();


/*!

  \brief Constructs a \c Ref with the value \c NIL.

  Constructs a \c Ref with the value \c NIL.

  \param nil - an instance of the class \c Nil. This is a dummy
  parameter that is not actually used.

  \post <code>
    *this       == NIL && <br>
    this->get() == NULL
  </code>

*/

  inline Ref ( const Nil& nil );


/*!

  \brief Creates a \c Ref that points to an existing object.

  Creates a \c Ref that points to the collectable object \a rhs.

  \param rhs - a pointer to an object of type \a T, or \c NULL. 

  \pre The type \a T must be derived from the \c Collectable class.

  \post <code>this->get() == rhs</code>

  \note This is the only function that requires that the type \a T is
  derived from the \c Collectable class.

*/

  inline Ref ( T* rhs );


/*!

  \brief Constructs a copy of another \c Ref.

  Constructs a \c Ref that points to the same object as the \c Ref \a
  rhs.

  \param rhs - the \c Ref to be copied.

  \post <code>this->get() == rhs.get()</code>

*/

  inline Ref ( const Ref& rhs );


/*!

  \brief Conversion constructor.

  Creates a \c Ref that points to a subobject of the object pointed to
  by the \c Ref \a rhs. Example:

  \code
  
  class Foo { ... };
  class Bar : public Foo { ... };

  Ref<Bar>  bar ( newInstance<Bar>() );
  
  Ref<Foo>  foo ( bar );  // `foo' now points to the Foo
                          // subobject of the Bar object pointed 
                          // to by `bar'.

  \endcode

  \param rhs - the \c Ref to be converted.

  \pre A pointer of type \a T* is assignable from a pointer of type \a
  U*.

  \post <code>this->get() == static_cast<T>( rhs.get() )</code>

  \note Because this constructor is not declared \c explicit, it can
  be used as an implicit conversion constructor.

*/

  inline Ref ( const Ref<U>& rhs );


//-----------------------------------------------------------------------
//   assignment operator
//-----------------------------------------------------------------------

/*!

  \brief Copies another \c Ref object.

  Copies the \c Ref \a rhs so that this \c Ref points to the same
  object as \a rhs.

  \param rhs - the \c Ref to be copied.

  \return <code> *this </code>

  \post <code>this->get() == rhs.get()</code>

*/

  inline Ref& operator = ( const Ref& rhs );


//-----------------------------------------------------------------------
//   equality operators
//-----------------------------------------------------------------------

/*!

  \brief Tests whether two \c Ref instances point two the same object.

  Tests whether this \c Ref and the \c Ref \a rhs point to the same
  object.

  \param rhs - the \c Ref object to which this \c Ref object should be
  compared.

  \return <code>this->get() == rhs.get()</code>

*/

  inline bool operator == ( const Ref& rhs ) const;


/*!

  \brief Tests whether this \c Ref does not point to an object.

  Tests whether this \c Ref does not point to an object.

  \param nil - an instance of the class \c Nil. This is a dummy
  parameter that is not actually used.

  \return <code> this->get() == NULL </code>

*/

  inline bool operator == ( const Nil& nil ) const;


/*!

  \brief Tests whether two \c Ref instances do not point two the same
  object.

  Tests whether this \c Ref and the \c Ref \a rhs point to different
  objects.

  \param rhs - the \c Ref object this \c Ref should be compared with.
  
  \return <code> this->get() != rhs.get() </code>

*/

  inline bool operator != ( const Ref& rhs ) const;


/*!

  \brief Tests whether this \c Ref points to an object.

  Tests whether this \c Ref points to an object.

  \param nil - an instance of the class \c Nil. This is a dummy
  parameter that is not actually used.

  \return <code> this->get() != NULL </code>

*/

  inline bool operator != ( const Nil& nil ) const;


//-----------------------------------------------------------------------
//   dereferencing operators
//-----------------------------------------------------------------------

/*!

  \brief Returns a pointer to the object that this \c Ref is pointing
  to.

  \return \c get()

  \pre <code> this->get() != NULL </code>

*/

  inline T* operator -> () const;


/*!

  \brief Returns a reference to the object that this \c Ref is
  pointing to.

  \return \c *get()

  \pre <code> this->get() != NULL </code>

*/

  inline T& operator * () const;


//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \brief Interchanges two \c Ref objects.

  Equivalent with:

  \code

  Ref<T> tmp( *this );

  (*this) = rhs;
  rhs     = tmp;

  \endcode

  \param rhs - \c the Ref object with which this \c Ref should be
  interchanged.

*/

  inline void swap ( Ref& rhs );


//-----------------------------------------------------------------------
//   getBase
//-----------------------------------------------------------------------

/*!

  \brief Returns a pointer to the \c Collectable subobject of the
  object this \c Ref is pointing to.

  \return <code>dynamic_cast<Collectable*>( this->get() )</code>

  \note The current implementation does not use a dynamic cast.

*/

  inline Collectable* getBase () const;


//-----------------------------------------------------------------------
//   get
//-----------------------------------------------------------------------

/*!

  \brief Returns a pointer to the object that this \c Ref is pointing
  to.

  \return A pointer to the object that this \c Ref is pointing to.

*/

  inline T* get () const;

};


//=======================================================================
//   related functions
//=======================================================================

//-----------------------------------------------------------------------
//   newInstance
//-----------------------------------------------------------------------

  \relates Ref
  
  \brief Creates a collectable object of type \a T.

  Equivalent with: <code> new T() </code>

  \return A \c Ref pointing to the new object.

*/

template <class T>
  Ref<T> newInstance();


/*!

  \relates Ref

  \brief Creates a collectable object of type \a T.

  Equivalent with: <code> new T( a ) </code>

  \param a - the argument to be passed to the constructor of type \a
  T.

  \return A \c Ref pointing to the new object.
*/

template <class T, class A>
  Ref<T> newInstance ( const A& a );


/*!

  \relates Ref  

  \brief Creates a collectable object of type \a T.

  Equivalent with: <code> new T( a, b ) </code>

  \param a - the first parameter to be passed to the constructor of
  type \a T.

  \param b - the second parameter to be passed to the constructor of
  type \a T.

  \return A \c Ref pointing to the new object.

*/


template <class T, class A, class B>
  Ref<T> newInstance ( const A& a,
                       const B& b );

/*!

  \relates Ref  

  \brief Creates a collectable object of type T.

  Equivalent with: <code> new T( a, b, c ) </code>

  \param a - the first parameter to be passed to the constructor of
  type \a T.
  
  \param b - the second parameter to be passed to the constructor of
  type \a T.

  \param c - the third parameter to be passed to the constructor of
  type \a T.

  \return A \c Ref pointing to the new object.

*/

template <class T, class A, class B, class C>
  Ref<T> newInstance ( const A& a,
                       const B& b,
                       const C& c );

/*!

  \relates Ref  

  \brief Creates a collectable object of type \a T.

  Equivalent with: <code> new T( a, b, c, d ) </code>

  \param a - the first parameter to be passed to the constructor of
  type \a T.
  
  \param b - the second parameter to be passed to the constructor of
  type \a T.

  \param c - the third parameter to be passed to the constructor of
  type \a T.

  \param d - the fourth parameter to be passed to the constructor of
  type \a T.

  \return A \c Ref pointing to the new object.

*/

template <class T, class A, class B, class C, class D>
  Ref<T> newInstance ( const A& a,
                       const B& b,
                       const C& c,
                       const D& d );


//-----------------------------------------------------------------------
//   staticCast
//-----------------------------------------------------------------------

/*!

  \relates Ref

  \brief Mimics a static cast expression.

  Converts the \c Ref \a r, encapsulating a pointer of type \a T*, to
  a \c Ref encapsulating a pointer of type \a U* using a static cast
  expression.

  \param r - the \c Ref that is to be converted.

  \return A \c Ref that points to
    <code>static_cast<U*>( r.get() )</code>.
  
  \post <code>
    staticCast<U>( r ).get() == static_cast<U*>( r.get() )
  </code>

*/

template <class U, class T>
  inline Ref<U> staticCast ( const Ref<T>& r );


//-----------------------------------------------------------------------
//   dynamicCast
//-----------------------------------------------------------------------

/*!

  \relates Ref

  \brief Mimics a dynamic cast expression.

  Converts the \c Ref \a r, encapsulating a pointer of type \a T*, to
  a \c Ref encapsulating a pointer of type \a U* using a dynamic cast
  expression.

  \param r - the \c Ref to be converted.

  \return A \c Ref that points to
    <code>dynamic_cast<U*>( r.get() )</code>.

  \post <code>
    dynamicCast<U>( r ).get() == dynamic_cast<U*>( r.get() )
  </code>

*/

template <class U, class T>
  inline Ref<U> dynamicCast ( const Ref<T>& r );


//-----------------------------------------------------------------------
//   checkedCast
//-----------------------------------------------------------------------

/*!

  \relates Ref

  \brief Mimics a dynamic cast expression and checks whether the cast
  succeeded.

  This function has the same effect as the \c dynamicCast function
  except that it throws an exception if the dynamic cast fails.

  \param r - the \c Ref to be converted.

  \return <code>dynamicCast<U>( r )</code>

  \throws ClassCastException - if the dynamic cast fails and \a r
  is not \c NIL.

*/

template <class U, class T>
  Ref<U> checkedCast ( const Ref<T>& r );


/------------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!
  \relates Ref

  \brief Interchanges two \c Ref objects.

  Equivalent with <code>lhs.swap( rhs )</code>.

  \param lhs - the first of the two \c Ref objects to be swapped.

  \param rhs - the second \c Ref objects to be swapped.
  
*/

template <class T>
  inline void swap ( Ref<T>& lhs, Ref<T>& rhs );




JEM_END_PACKAGE_BASE
