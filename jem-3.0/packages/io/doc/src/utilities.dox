
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( io )


/*!

  \defgroup IOUtilities General I/O-related utility functions

  \brief A collection of handy I/O-related functions.

  <code>\#include <jem/io/utilities.h></code>

  This header file provides a collection of simple I/O-related utility
  functions. It is essentially a collection of functions that do not
  seem to fit anywhere else.

*/


//@{


//-----------------------------------------------------------------------
//   canZip
//-----------------------------------------------------------------------

/*!

  \brief Indicates whether data compression is supported.

  Returns \c true if this version of Jem supports data compression and
  decompression using the zlib library (see www.zlib.org). It returns
  \c false otherwise.

  \sa \c ZipInputStream, \c ZipOutputStream

*/

bool canZip ();


//-----------------------------------------------------------------------
//   printSequence
//-----------------------------------------------------------------------

/*!
  
  \brief Prints a sequence of objects to a text output stream.

  Prints the elements between the iterators \a first and \a last to
  the text output stream \a out. The string \a separator is printed
  between two successive elements.
  
  This function essentially executes the following code:
  
  \code
  for ( ; first != last; ++first )
  {
    out << *first;
  
    if ( first != last )
    {
      out << separator;
    }
  }
  \endcode
    
  \param out - a text output stream.

  \param first - an iterator pointing to the first element to be
  printed.

  \param last - an iterator pointing one position past the last
  element to be printed.
    
  \param separator - the string to be printed between two successive
  elements.

  \return \a out

  \pre The object returned by the expression \c *first must provide an
  overloaded print operator.

  \throws IOException - if an I/O error occurs.

*/


template <class Iterator>
  TextOutput& printSequence ( TextOutput&  out,
                              Iterator     first,
                              Iterator     last,
                              const char*  separator );



//@}

JEM_END_PACKAGE( io )
