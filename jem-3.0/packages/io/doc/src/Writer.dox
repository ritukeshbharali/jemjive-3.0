
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( io )


//=======================================================================
//   class Writer
//=======================================================================

/*!
  \class Writer Writer.dox  jem/io/Writer.h

  \brief Represents a text output stream.

  The \c Writer class implements the \c TextOutput interface and
  provides various additional member functions for operating on text
  output streams. Since the \c Writer class also extends the \c Object
  class, \c Writer instances are subjected to \ref CollectableObject
  "garbage collection".

  \sa \c Reader.

*/

class Writer : public Object,
               public TextOutput
{
 public:

//-----------------------------------------------------------------------
//   lock
//-----------------------------------------------------------------------

/*!

  \brief Locks this output stream.

  This function locks this \c Writer object so that only the
  current thread can write to the output stream. %All other threads
  calling this function will be blocked until the current thread
  calls the \c unlock() member function.

  The \c lock() and \c unlock() member functions are guaranteed to be
  recursive. This means that a thread may call \c lock()
  multiple times without creating a deadlock situation. Each call to
  \c lock() must be balanced by a call to \c unlock() to ensure that
  this \c Writer instance does not become permanently inaccessible to
  other threads.

  The \c lock() function does not \em have to lock this object. In
  fact, the default implementation provided by the \c Writer class does
  nothing. It is up to you to instantiate a class derived from the \c
  Writer class that implements an appropriate locking scheme.

  \sa \c Lock, \c IOMutex, \c ThreadSafeWriter.

*/

  virtual void lock ();


//-----------------------------------------------------------------------
//   unlock
//-----------------------------------------------------------------------

/*!
  
  \brief Unlocks this output stream.

  Unlocks this \c Writer object so that it can be accessed by other
  threads.

  The default implementation provided by the \c Writer class
  does nothing.

  \pre This object has been locked by a call to the \c lock() member
  function.

*/

  virtual void unlock ();


//-----------------------------------------------------------------------
//   poll
//-----------------------------------------------------------------------

/*!

  \brief Returns the number of characters that can be written without
  blocking.

  Returns the number of characters that can be written to this output
  stream without having to wait until the underlying device has become
  ready for writing. If you write more characters you may have to
  wait an unspecified amount of time before the write operation is
  completed.

  Note that a call to one of the \c write() functions is \em not
  guaranteed to block if more characters are written than the number
  returned by this function.
  
  Also note that if another thread writes to this stream after calling
  the \c poll() function, the current thread may no longer be able to
  write the returned number of characters without blocking. Use the \c
  lock() member function to avoid these types of situations.

  The default implementation provided by the \c Writer class always
  returns zero.

  \return The number of characters that can be written without
  blocking.

  \throw IOException - if an I/O error occurs.

*/

  virtual int poll ();


//-----------------------------------------------------------------------
//   close
//-----------------------------------------------------------------------

/*!

  \brief Closes this output stream.

  Closes this output stream. After calling this function, one should
  not attempt to write any more characters to the stream.

  The default implementation provided by the \c Writer class does
  nothing.

  \throw IOException - if an I/O error occurs.

*/

  virtual void close ();


//-----------------------------------------------------------------------
//   flush
//-----------------------------------------------------------------------

/*!

  \brief Writes any buffered data to this output stream.

  Writes any buffered characters to this output stream.

  The default implementation provided by the \c Writer class does
  nothing.

  \throw IOException - if an I/O error occurs.

*/

  virtual void flush ();


//-----------------------------------------------------------------------
//   write
//-----------------------------------------------------------------------

/*!
  
  \brief Writes multiple copies of a character to this output stream.

  Writes \a n copies of the integer \a c, cast to an <code>unsigned
  char</code>, to this output stream.

  The default implementation provided by the \c Writer class
  repeatedly calls the \c write(int) member function. Derived classes
  are encouraged to provide a more efficient implementation.

  \param c - the character to be written.

  \param n - the number of copies of the character \a c to be written.

  \pre <code>n >= 0</code>

  \throws IOException - if an I/O error occurs.

*/

  virtual void  write ( int c, int n );


/*!
  
  \brief Writes an array of characters to this output stream.

  Writes the first \a n characters stored in the array \a buf to this
  output stream.

  The default implementation provided by the \c Writer class
  repeatedly calls the \c write(int) member function. Derived classes
  are encouraged to provide a more efficient implementation.

  \param buf - a character array of which the length is at least \a n.

  \param n - the number of characters to be written.

  \pre
    <code>n >= 0</code> <br>
    and the array \a buf is at least \a n characters long.

  \post The characters <code>buf[0], ..., buf[n - 1]</code> have been
  written to this output stream.

  \throws IOException - if an I/O error occurs.

*/

  virtual void  write ( const char* buf, int n );


//-----------------------------------------------------------------------
//   writeNoThrow
//-----------------------------------------------------------------------

/*!
  
  \brief Writes a character array without throwing an exception.

  Writes the first \a n characters stored in the array \a buf to this
  output stream and tries not to throw an exception. The idea is that
  this member function can be safely called from the destructor of a
  class (to empty its buffers, for instance).

  Note that there is no guarantee that this function does not throw an
  exception, since that may not always be possible. However, a well
  behaved implementation should avoid throwing exceptions whenever
  that is possible.

  The default implementation provided by the \c Writer class simply
  calls <code>write ( buf, n )</code>.

  \param buf - a character array of which the length is at least \a n.

  \param n - the number of characters to be written.

  \pre
    <code>n >= 0</code> <br>
    and the array \a buf is at least \a n characters long.

  \post The characters <code>buf[0], ..., buf[n - 1]</code> have been
  written to this output stream.

*/

  virtual void  writeNoThrow ( const char* buf, int n );


//-----------------------------------------------------------------------
//   printByte
//-----------------------------------------------------------------------

/*!

  \brief Prints a formatted byte to this output stream.

  Prints the byte \a b as a hexadecimal number to this output stream.

  \param b - the byte to be printed.

  \throws IOException - if an I/O error occurs.

  \sa \c Integer::print().

*/

  virtual void  printByte  ( byte   b );
  

//-----------------------------------------------------------------------
//   printBool
//-----------------------------------------------------------------------

/*!

  \brief Prints a formatted bool to this output stream.

  Prints the bool \a b to this output stream in the following format:

  \li \c "false" - if \a b is \c false;
  \li \c "true"  - if \a b is \c true.

  \param b - the bool to be printed.

  \throws IOException - if an I/O error occurs.

  \sa \c Boolean::print().

*/

  virtual void  printBool  ( bool   b );


//-----------------------------------------------------------------------
//   printInt
//-----------------------------------------------------------------------

/*!

  \brief Prints a formatted integer to this output stream.

  Prints the long integer \a i as a decimal number to this output
  stream.

  \param i - the integer to be printed.

  \throws IOException - if an I/O error occurs.

  \sa \c Integer::print().

*/

  virtual void  printInt   ( long   i );


//-----------------------------------------------------------------------
//   printFloat
//-----------------------------------------------------------------------

/*!

  \brief Prints a formatted double to this output stream.

  Prints the double \a d to this output stream.

  \param d - the double to be printed.

  \throws IOException - if an I/O error occurs.

  \sa \c Float::print().

*/

  virtual void  printFloat ( double d );

};




JEM_END_PACKAGE( io )


