
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( io )


//=======================================================================
//   class Reader
//=======================================================================

/*!
  \class Reader Reader.dox jem/io/Reader.h

  \brief Represents a text input stream.

  The \c Reader class implements the \c TextInput interface and
  provides various additional member functions for operating on text
  input streams. Since the \c Reader class also extends the \c Object
  class, \c Reader instances are subjected to \ref CollectableObject
  "garbage collection".

  \sa \c Writer.

*/

class Reader : public Object, public TextInput
{
 public:

//-----------------------------------------------------------------------
//   lock
//-----------------------------------------------------------------------

/*!

  \brief Locks this input stream.

  This function locks this \c Reader object so that only the
  current thread can read from the input stream. %All other threads
  calling this function will be blocked until the current thread
  calls the \c unlock() member function.

  The \c lock() and \c unlock() member functions are guaranteed to be
  recursive. This means that a thread may call \c lock()
  multiple times without creating a deadlock situation. Each call to
  \c lock() must be balanced by a call to \c unlock() to ensure that
  this \c Reader instance does not become permanently inaccessible to
  other threads.

  The \c lock() function does not \em have to lock this object. In
  fact, the default implementation provided by the \c Reader class does
  nothing. It is up to you to instantiate a class derived from the \c
  Reader class that implements an appropriate locking scheme.

  \sa \c Lock, \c IOMutex, \c ThreadSafeReader.

*/

  virtual void lock ();


//-----------------------------------------------------------------------
//   unlock
//-----------------------------------------------------------------------

/*!
  
  \brief Unlocks this input stream.

  Unlocks this \c Reader object so that it can be accessed by other
  threads.

  The default implementation provided by the \c Reader class
  does nothing.

  \pre This object has been locked by a call to the \c lock() member
  function.

*/

  virtual void unlock ();


//-----------------------------------------------------------------------
//   close
//-----------------------------------------------------------------------

/*!

  \brief Closes this input stream.

  Closes this input stream. After calling this function, one should
  not attempt to read any more characters from this stream.

  The default implementation provided by the \c Reader class does
  nothing.

  \throw IOException - if an I/O error occurs.

*/

  virtual void close ();


//-----------------------------------------------------------------------
//   poll
//-----------------------------------------------------------------------

/*!

  \brief Returns the number of characters that can read without
  blocking.

  Returns the number of characters that can be read from this input
  stream without having to wait until the underlying device has become
  ready for reading. If you read more characters you may have to
  wait an unspecified amount of time before the read operation is
  completed.

  Note that a call to one of the \c read() functions will not
  necessarily block if more characters are read than the number
  returned by this function.
  
  Also note that if another thread reads from this stream after
  calling the \c poll() function, the current thread may no longer be
  able to read the returned number of characters without blocking. Use
  the \c lock() member function to avoid these types of situations.

  The default implementation provided by the \c Reader class always
  returns zero.

  \return The number of characters that can be read without
  blocking.

  \throw IOException - if an I/O error occurs.

*/

  virtual int poll ();


//-----------------------------------------------------------------------
//   read
//-----------------------------------------------------------------------

/*!

  \brief Extracts multiple characters from this input stream.

  Extracts up to \a n characters from this input stream and stores
  them into the the array \a buf. The implementation provided by the
  \c Reader class simply calls \c read() in a loop. Derived classes
  are encouraged to provide a more efficient implementation.

  \param buf - a character array of which the size is at least \a n.

  \param n - the maximum number of characters to be extracted from the
  input stream.

  \return The number of characters that have been extracted from the
  input stream.

  \throws IOException - if an I/O error occurs.

*/

  virtual int read ( char* buf, int n );


//-----------------------------------------------------------------------
//   readUntil
//-----------------------------------------------------------------------

/*!

  \brief Reads characters until a specified character.

  Reads characters until the delimiting character (delimiter) \a delim
  is encountered, or until \a n characters have been read, or until
  the end of the input stream has been reached. All read characters
  are stored in the array \a buf and the total number of read
  characters is returned. The delimiter is \em not extracted from the
  input stream.

  The implementation of this function provided by the \c Reader class
  calls the \c read() member function in a loop.

  \param buf - a character array of which the size is at least \a n.

  \param n - the maximum number of characters to be extracted from the
  input stream.

  \param delim - the delimiter.

  \return The number of characters that have been extracted from the
  input stream and that have been stored in the character array \a
  buf.

  \pre
    <code>n >= 0</code> <br>
    and the array \a buf is at least \a n characters long.

  \post If \a k denotes the value returned by this function, then the
  array elements <code>buf[0], ..., buf[k - 1]</code> have been
  filled.

  \throws IOException - if an I/O error occurs.

*/

  virtual int readUntil ( char* buf, int n, int delim );
  

//-----------------------------------------------------------------------
//   skipUntil
//-----------------------------------------------------------------------

/*!

  \brief Skips characters until a specified character.

  Reads characters from this input stream until the delimiting
  character \a delim is encountered, or until the end of the input
  stream has been reached. The delimiter is \em not extracted from the
  input stream.

  The implementation of this function provided by the \c Reader class
  repeatedly calls the member function \c readUntil().

  \param delim - the delimiter.

  \throws IOException - if an I/O error occurs.

*/

  virtual void skipUntil ( int delim );


//-----------------------------------------------------------------------
//   skipWhite
//-----------------------------------------------------------------------

/*!

  \brief Skips over white space.

  Extracts white space from this input stream. The implementation
  provided by the \c Reader class simply executes:
  
  \code
  int c;

  for ( c = read(); c >= 0 && isspace(c); c = read() );
  pushBack( c );
  \endcode

  \post The next character returned by the \c read() member function
  either returns \c -1 or a non-white space character.

  \throws IOException - if an I/O error occurs.

*/

  virtual void skipWhite ();


//-----------------------------------------------------------------------
//   skip
//-----------------------------------------------------------------------

/*!

  \brief Skips over a specified number of characters.

  Extracts up to \a n characters from this input stream, and returns
  the number of characters that have been extracted. This number may
  be less than \a n if the end of the input stream has been reached.

  The implementation of this function provided by the \c Reader class
  repeatedly calls the member function <code>read( char*, int
  )</code>.

  \param n - the number of characters to be skipped.

  \return The number of characters that have been extracted from this
  input stream.

  \throws IOException - if an I/O error occurs.

*/

  virtual int skip ( int n );


//-----------------------------------------------------------------------
//   readLine
//-----------------------------------------------------------------------

/*!

  \brief Reads the next line from this input stream.

  Reads and returns the next line in the input stream. That is, it
  reads characters until a newline character '\\n' is encountered, or
  until the end of file has been reached. The read characters are then
  returned as a \c String object.
  
  \return A \c String containing the next line in this input stream.

  \throws IOException - if an I/O error occurs.

*/

  String readLine ();


//-----------------------------------------------------------------------
//   parseByte
//-----------------------------------------------------------------------

/*!

  \brief Reads a byte from this input stream.

  Reads a byte from this input stream. The implementation provided by
  the \c Reader class first calls \c readInt(), and then tries to
  convert the read integer to a byte.

  \return The byte that has been read from this input stream.

  \throws IOException - if an I/O error occurs.

  \throws ParseException - if the input is not in the correct format.

  \throws IllegalInputException - if the input is out of range.

*/

  virtual byte parseByte ();


//-----------------------------------------------------------------------
//   parseBool
//-----------------------------------------------------------------------

/*!
  
  \brief Reads a boolean from this input stream.

  Reads a boolean from this input stream. The boolean should be stored
  in one of the following formats:

  \li \c "0" - which is converted to \c false
  \li \c "1" - which is converted to \c true
  \li \c "true"
  \li \c "false"

  Any leading white space is skipped by calling
  <code>in.skipWhite()</code>.

  Note that this function is case insensitive. The input \c "True", for
  instance, is also considered to be valid.

  \return The bool that has been read from this input stream.

  \throws IOException - if an I/O error occurs.

  \throws ParseException - if the input is not in the correct format.

*/

  virtual bool parseBool ();


//-----------------------------------------------------------------------
//   parseInt
//-----------------------------------------------------------------------

/*!
  
  \brief Reads a long integer from this input stream.
  
  Reads a long integer from this input stream. The integer should be
  stored in either a decimal or a hexadecimal format, and it may be
  preceded by a single '-' or '+' character. Any leading white space
  is skipped by calling <code>in.skipWhite()</code>.

  Valid long integers are:

  \li \c "123"   - a positive, decimal number;
  \li \c "0xfff" - a positive, hexadecimal number;
  \li \c "-222"  - a negative, decimal number.

  This function stops extracting characters from the input stream when
  it encounters a character that can not be part of an integer number.

  \return The integer that has been read from this input stream.

  \throws IOException - if an I/O error occurs.

  \throws ParseException - if the input can not be converted to a long
  integer.

  \throws IllegalInputException - if the input is out of range.  

*/


  virtual long parseInt ();


//-----------------------------------------------------------------------
//   parseFloat
//-----------------------------------------------------------------------

/*!

  \brief Reads a double from this input stream.

  Reads a double precision number from this input stream. The double
  should be stored in the following format: an optional '+' or '-'
  character, followed by a sequence of decimal digits, followed by an
  optional decimal point and another sequence of decimal digits,
  optionally followed by an eponent. The exponent consists of a 'e' or
  'E' character, followed by an optional '+' or '-' character,
  followed by a sequence of decimal digits. Any leading white space is
  skipped by calling <code>in.skipWhite()</code>.

  Valid double precision numbers are:
  
  \li \c "1.0"     - a positive number;
  \li \c "-1.0"    - a negative number;
  \li \c "+1.0e-2" - a positive number with an exponent;

  This function stops extracting characters from the input stream when
  it encounters a character that can not be part of an double
  precision number.

  \return The double that has been read from this input stream.

  \throws IOException - if an I/O error occurs.
  
  \throws ParseException - if the input can not be converted to a
  double.

  \throws IllegalInputException - if the input is out of range.

*/

  virtual double parseFloat ();
  
};


JEM_END_PACKAGE( io )
