
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */

#ifndef JEM_NUMERIC_SPARSE_SPARSEFILTER_H
#define JEM_NUMERIC_SPARSE_SPARSEFILTER_H

#include <jem/base/utilities.h>
#include <jem/base/functional.h>
#include <jem/numeric/utilities.h>


JEM_BEGIN_PACKAGE( numeric )


//-----------------------------------------------------------------------
//   class SparseFilter (primary template)
//-----------------------------------------------------------------------

/*!

  \class SparseFilter SparseFilter.dox jem/numeric/sparse/SparseFilter.h

*/

template <class T, class F>  class SparseFilter {};



//-----------------------------------------------------------------------
//   class SparseFilterInterface
//-----------------------------------------------------------------------


/*!

  \class SparseFilterInterface SparseFilter.dox jem/numeric/sparse/SparseFilter.h

*/

template <class T>

  class SparseFilterInterface

{
 public:

  virtual inline     ~SparseFilterInterface ();

  virtual bool        accept

    ( const T&          value,
      idx_t             i,
      idx_t             j ) const = 0;

};


//-----------------------------------------------------------------------
//   class SparseFilterWrapper
//-----------------------------------------------------------------------

/*!

  \class SparseFilterWrapper SparseFilter.dox jem/numeric/sparse/SparseFilter.h

*/

template <class T, class F>

  class SparseFilterWrapper :
  public SparseFilterInterface<T>

{
 public:

  inline              SparseFilterWrapper ();

  explicit inline     SparseFilterWrapper

    ( const SparseFilter<T,F>&  f );

  virtual inline     ~SparseFilterWrapper ();

  virtual bool        accept

    ( const T&          value,
      idx_t             i,
      idx_t             j ) const;


};


//-----------------------------------------------------------------------
//   filter operators
//-----------------------------------------------------------------------

/*!
  \relates SparseFilter

  \brief Logical NOT operator 

  Locical NOT operator

  \param f - a sparse filter object.

  \return a sparse filter object that represents the
  locigal NOT of the input sparse filter object.

*/

template <class T, class F>

  inline SparseFilter<T,UnaryExpr<LogicalNot<bool>,F> >

  operator !  ( const SparseFilter<T,F>&   f );

/*!
  \relates SparseFilter

  \brief Logical AND operator 

  Locical AND operator

  \param lhs - a sparse filter object.

  \param rhs - a sparse filter object.

  \return a sparse filter object that represents the
  locigal AND operation on the lhs and rhs sparse filter
  objects.

*/

template <class T, class F1, class F2>

  inline SparseFilter<T,BinaryExpr<LogicalAnd<bool>,F1,F2> >

  operator && ( const SparseFilter<T,F1>&  lhs,
                const SparseFilter<T,F2>&  rhs );

/*!
  \relates SparseFilter

  \brief Logical OR operator 

  Locical OR operator

  \param lhs - a sparse filter object.

  \param rhs - a sparse filter object.

  \return a sparse filter object that represents the
  locigal OR operation on the lhs and rhs sparse filter
  objects.

*/

template <class T, class F1, class F2>

  inline SparseFilter<T,BinaryExpr<LogicalOr<bool>,F1,F2> >

  operator || ( const SparseFilter<T,F1>&  lhs,
                const SparseFilter<T,F2>&  rhs );



JEM_END_PACKAGE( numeric )

#endif
