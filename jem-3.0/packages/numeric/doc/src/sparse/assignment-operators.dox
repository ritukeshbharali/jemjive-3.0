
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( numeric )

/*!

  \page SparseMatrixAssignmentOperators SparseMatrix assignment operators

  <code>\#include <jem/numeric/sparse/operators.h></code> \b or <br>
  <code>\#include <jem/numeric/Sparse.h></code>.

  In addition to the standard assignment operator, jem provides a set
  of overloaded computed assignment operators for sparse matrices. 
  These are defined as follows:

  \code
  template <class T>
    const SparseMatrix<T>& operator \<op\>= ( const SparseMatrix<T>& lhs,
                                              const T&               rhs )
  {
    return ( lhs = lhs <op> rhs );
  }


  template <class T>
    const SparseMatrix<T>& operator \<op\>= ( const SparseMatrix<T>& lhs,
                                              const SparseMatrix<T>& rhs )
  {
    return ( lhs = lhs <op> rhs );
  }
  \endcode

  where \c \<op\> can be one of the following operators:

  \li \c *  (multiplication)
  \li \c /  (division)
  \li \c %  (modulo division)
  \li \c +  (addition)
  \li \c -  (substraction)

  The computed assignment operators should be called with two
  arguments. The first one should be an \c SparseMatrix object. 
  The second argument should be an \c SparseMatrix object,
  or a scalar. All operators return a reference to the first 
  argument.

  The computed assignment operators are defined in the header file
  <code><jem/numeric/sparse/operators.h></code>. They are also
  available through the general header file
  <code><jem/numeric/Sparse.h></code>.

  Note that the computed assignment operators are not member
  functions.
*/    


JEM_END_PACKAGE( numeric )
