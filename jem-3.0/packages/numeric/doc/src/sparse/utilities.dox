
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( numeric )


/*!

  \defgroup SparseMatrixUtilities Sparse matrix utility functions

  \brief A set of functions that operate on sparse matrices and sparse
  structures.

  <code>\#include <jem/numeric/sparse/utilities.h></code>

*/


//@{


//-----------------------------------------------------------------------
//   utility functions
//-----------------------------------------------------------------------

/*!

  \brief Returns the diagonal values of a sparse matrix

  Returns an array that contains the diagonal values of the
  sparse matrix

  \param a - sparse matrix

  \return an array containing the diagonal values of the matrix

*/

template <class T>

  Array<T>                          diag

  ( const SparseMatrix<T>&            a );


/*!

  \brief performs a jem::sort on each row of a sparse matrix

  sorts the column indices of each row based on the values.
  The sparse matrix still represents the same mathematical matrix
  after the function call, however the data is stored differently.

  \param a - sparse matrix that is adapted

*/

template <class T>

  void                              sortRows

  ( SparseMatrix<T>&                  a );


/*!

  \brief Returns a copy of a sparse matrix with certain elements
  filtered out.

  Returns a sparse matrix that is identical to the input matrix, but
  for the elements that have been filtered out using a sparse filter 
  object.

  \param a - sparse matrix

  \param f - a sparse filter

  \return a sparse matrix

*/

template <class T, class F>

  SparseMatrix<T>                   filter

  ( const SparseMatrix<T>&            a,
    const SparseFilter<T,F>&          f );

/*!

  \brief creates a sparse matrix from a two-dimensional sparse 
  array.

  Returns a sparse matrix representation of a two-dimenstional sparse 
  array object

  \param a - two-dimenstional sparse aray

  \return a sparse matrix

*/

template <class T, class A>

  SparseMatrix<T>                   toMatrix

  ( const util::SparseArray<T,2,A>&   a );


/*!

  \brief creates a two-dimensional sparse array from a sparse 
  matrix.

  Fills the sparse array parameter out with a copy of the
  sparse matrix in. The existing data in the sparse array
  out will be deleted. The function returns a reference to 
  the sparse array parameter out.

  \param out - two-dimenstional sparse aray

  \param in - parse matrix

  \return a reference to the parameter out

*/

template <class T, class A>

  util::SparseArray<T,2,A>&         toArray

  ( util::SparseArray<T,2,A>&         out,
    const SparseMatrix<T>&            in );



//@}



JEM_END_PACKAGE( numeric )
