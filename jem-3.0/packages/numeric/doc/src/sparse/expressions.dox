
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( numeric )


/*!

  \page SparseMatrixExpressions SparseMatrix expressions

  Jem provides a set of overloaded operators and functions for 
  writing expressions that operate on all elements of one or more
  sparse matrices. 

  Note that these operators and functions are not member functions.

  \section BinarySparsematrixOperators Binary operators

  <code>\#include <jem/numeric/sparse/operators.h></code> \b or <br>
  <code>\#include <jem/numeric/Sparse.h></code>.
  
  Supported binary arithmetic operators:

  \li \c + (addition)
  \li \c - (substraction)
  \li \c * (multiplication)

  Supported binary logical operators:

  \li \c || (logical or)
  \li \c && (logical and)
  
 Supported comparison operators:

  \li \c == (equal)
  \li \c != (not equal)

*/

//@{

//-----------------------------------------------------------------------
//   unite
//-----------------------------------------------------------------------

/*!

  \brief Brief explanation of this unite function

  More elaborate explanation of this unite function

  \param a - a sparse matrix

  \param b - a sparse matrix

  \param op - the binary operation to be performed between 
  elements of the two sparse matrices

  \return SparseMatrix object

*/

template <class T, class Op>

  SparseMatrix<T>           unite

  ( const SparseMatrix<T>&    a,
    const SparseMatrix<T>&    b,
    const Op&                 op );

/*!

  \brief Brief explanation of this unite function

  More elaborate explanation of this unite function

  \param a - a sparse matrix

  \param b - a sparse matrix

  \param op - the binary operation to be performed between 
  elements of the two sparse matrices

  \param filter - the filter that has to be applied on
  the result of the binary operation of the two elements

  \return SparseMatrix object

*/

template <class T, class Op, class F>

  SparseMatrix<T>           unite

  ( const SparseMatrix<T>&    a,
    const SparseMatrix<T>&    b,
    const Op&                 op,
    const SparseFilter<T,F>&  filter );


//-----------------------------------------------------------------------
//   intersect
//-----------------------------------------------------------------------


/*!

  \brief Brief explanation of this unite function

  More elaborate explanation of this unite function

  \param a - a sparse matrix

  \param b - a sparse matrix

  \param op - the binary operation to be performed between 
  elements of the two sparse matrices

  \return SparseMatrix object

*/

template <class T, class Op>

  SparseMatrix<T>           intersect

  ( const SparseMatrix<T>&    a,
    const SparseMatrix<T>&    b,
    const Op&                 op );

/*!

  \brief Brief explanation of this unite function

  More elaborate explanation of this unite function

  \param a - a sparse matrix

  \param b - a sparse matrix

  \param op - the binary operation to be performed between 
  elements of the two sparse matrices

  \param filter - the filter that has to be applied on
  the result of the binary operation of the two elements

  \return SparseMatrix object

*/

template <class T, class Op, class F>

  SparseMatrix<T>           intersect

  ( const SparseMatrix<T>&    a,
    const SparseMatrix<T>&    b,
    const Op&                 op,
    const SparseFilter<T,F>&  filter );






//@}



JEM_END_PACKAGE( numeric )
