
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( numeric )


/*!

  \defgroup DenseMatmul Dense matrix/vector-matrix/vector multiplication

  \brief A collection of functions for computing dense 
  matrix/vector-matrix/vector products.

  <code>\#include <jem/numeric/algebra/matmul.h></code>

  This header file exports a set of template functions -- all named \c
  matmul -- that compute the following types of matrix-vector
  products: the product of a matrix and a column vector; the product
  of a row vector and a matrix; the product of a column vector and a
  row vector; and the product of two matrices.

  Both column and row vectors are represented by one-dimensional \c
  Array objects. Matrices are represented by two-dimensional \c Array
  objects and by \c Tuple objects.

  The \c matmul functions come in two flavors: one with three
  parameters and one with two parameters. The \c matmul functions with
  three parameters store their results in their first argument. The \c
  matmul functions with two parameter, on the other hand, return a new
  \c Array or \c Tuple object containing the computed results. The
  three-parameter versions of \c matmul are faster because they do not
  have to allocate memory. The two-parameter versions are sometimes
  more convenient to use because they can be easily embedded into an
  array expression.

  \sa \c MatmulChain

*/


//@{


//-----------------------------------------------------------------------
//   matrix-vector product
//-----------------------------------------------------------------------

/*!

  \brief Computes the product of a matrix and a column vector.

  Computes the product of the matrix \a a and the column vector \a
  b. The result is stored in the column vector \a r.

  This function is equivalent with:

  \code

  int i, j;

  for ( i = 0; i < r.size(); i++ )
  {
    r[i] = (T) 0;
  
    for ( j = 0; j < b.size(); j++ )
    {
      r[i] += a(i,j) * b[j];
    }
  }

  \endcode

  However, if the template parameter \c T is of type \c bool, then the
  matrix-vector product is computed as follows:

  \code

  int i, j;

  for ( i = 0; i < r.size(); i++ )
  {
    r[i] = false;
  
    for ( j = 0; j < b.size(); j++ )
    {
      r[i] = r[i] || ( a(i,j) && b[j] );
    }
  }

  \endcode

  Note that the actual implementation of this is function is much more
  efficient than the code shown above because it takes advantage of
  the particular way in which the \c Array class stores its data.

  \param r - a column vector that is set to the matrix-vector
  product of \a a and \a b.

  \param a - a matrix.

  \param b - a column vector.

  \pre <code>
    r.size() == a.size(0) && <br>
    b.size() == a.size(1)
  </code>

*/

template <class T>
  void matmul ( const Array<T,1>&  r, 
                const Array<T,2>&  a, 
                const Array<T,1>&  b );


/*!

  \brief Returns the product of a matrix and a column vector.

  Returns a column vector containing the product of the matrix \a a
  and the column vector \a b.

  This function simply executes:

  \code

  Array<T> r ( a.size(0) );

  matmul ( r, a, b );
  return r;

  \endcode

  \param a - a matrix.

  \param b - a column vector.

  \return The product of \a a and \a b.

*/

template <class T>
  inline Array<T,1> matmul ( const Array<T,2>&  a, 
                             const Array<T,1>&  b );


//-----------------------------------------------------------------------
//   vector-matrix product
//-----------------------------------------------------------------------

/*!

  \brief Computes the product of a row vector and a matrix.

  Computes the product of the row vector \a a and the matrix \a
  b. The result is stored in the row vector \a r.

  This function essentially executes the following algorithm:

  \code

  int i, j;

  for ( j = 0; j < r.size(); j++ )
  {
    r[j] = (T) 0;
  
    for ( i = 0; i < a.size(); i++ )
    {
      r[j] += a[i] * b(i,j);
    }
  }

  \endcode

  If the template argument \c T equals the type \c bool, however, the
  vector-matrix product is computed as follows:

  \code
  
  int i, j;

  for ( j = 0; j < r.size(); j++ )
  {
    r[j] = false;
 
    for ( i = 0; i < a.size(); i++ )
    {
      r[j] = r[j] || ( a[i] && b(i,j) );
    }
  }

  \endcode
  
  Note that the actual implementation of this is function is much more
  efficient than the code shown above because it takes advantage of
  the particular way in which the \c Array class stores its data.

  \param r - a row vector that is set to the vector-matrix product
  of \a a and \a b.

  \param a - a row vector.

  \param b - a matrix.

  \pre <code>
    r.size() == b.size(1) && <br>
    a.size() == a.size(0)
  </code>
  
*/

template <class T>
  void matmul ( const Array<T,1>&  r,
                const Array<T,1>&  a, 
                const Array<T,2>&  b );


/*!

  \brief Returns the product of a row vector and a matrix.

  Returns a row vector containing the product of the row vector \a a
  and the matrix \a b.

  This function simply executes:

  \code

  Array<T> r ( b.size(1) );

  matmul ( r, a, b );
  return r;

  \endcode

  \param a - a row vector.

  \param b - a matrix.

  \return The product of \a a and \a b.

*/

template <class T>
  inline Array<T,1> matmul ( const Array<T,1>&  a, 
                             const Array<T,2>&  b );


//-----------------------------------------------------------------------
//   vector-vector product
//-----------------------------------------------------------------------

/*!

  \brief Computes the product of a column vector and a row vector.

  Computes the product of the column vector \a a and the row vector \a
  b. The result is stored in the matrix \a r.

  The vector-vector product is computed as follows:

  \code

  int i, j;

  for ( i = 0; i < a.size(); i++ )
  {
    for ( j = 0; j < b.size(); j++ )
    {
      r(i,j) = a[i] * b[j];
    }
  }

  \endcode

  If the template arguments \c T is of type \c bool, however, then the
  product is computed as follows:

  \code

  int i, j;

  for ( i = 0; i < a.size(); i++ )
  {
    for ( j = 0; j < b.size(); j++ )
    {
      r(i,j) = a[i] && b[j];
    }
  }

  \endcode  

  Note that the actual implementation of this is function is much more
  efficient than the code shown above because it takes advantage of
  the particular way in which the \c Array class stores its data.

  \param r - a matrix that is set to the vector-vector product
  of \a a and \a b.

  \param a - a column vector.

  \param b - a row vector.

  \pre <code>
    r.size(0) == a.size() && <br>
    r.size(1) == b.size()
  </code>

*/

template <class T>
  void matmul ( const Array<T,2>&  r,
                const Array<T,1>&  a, 
                const Array<T,1>&  b );


/*!

  \brief Returns the product of a column vector and a row vector.

  Returns a matrix containing the product of the column vector \a a
  and the row vector \a b.

  This function simply executes:

  \code

  Array<T,2> r ( a.size(), b.size() );

  matmul ( r, a, b );
  return r;

  \endcode

  \param a - a column vector.

  \param b - a row vector.

  \return The product of \a a and \a b.

*/

template <class T>
  inline Array<T,2> matmul ( const Array<T,1>&  a, 
                             const Array<T,1>&  b );


//-----------------------------------------------------------------------
//   matrix-matrix product
//-----------------------------------------------------------------------

/*!

  \brief Computes the product of two matrices.
  
  Computes the product of the matrices \a a and \a b. The resulting
  matrix is stored in \a r.

  The matrix-matrix product is computed as follows:

  \code
  
  int i, j, k;
  
  for ( i = 0; i < r.size(0); i++ )
  {
    for ( j = 0; j < r.size(1); j++ )
    {
      r(i,j) = (T) 0;
    
      for ( k = 0; k < a.size(1); k++ )
      {
        r(i,j) += a(i,k) * b(k,j);
      }
    }
  }
  
  \endcode
  
  If the template arguments \c T is of type \c bool, then the product
  is computes as follows:

  \code
  
  int i, j, k;
  
  for ( i = 0; i < r.size(0); i++ )
  {
    for ( j = 0; j < r.size(1); j++ )
    {
      r(i,j) = false;
    
      for ( k = 0; k < a.size(1); k++ )
      {
        r(i,j) = r(i,j) || ( a(i,k) &&  b(k,j) );
      }
    }
  }
  
  \endcode
  
  Note that the actual implementation of this is function is much more
  efficient than the code shown above because it takes advantage of
  the particular way in which the \c Array class stores its data.

  \param r - a matrix that is set to the matrix-matrix product
  of \a a and \a b.

  \param a - a matrix.

  \param b - another matrix.

  \pre <code>
    r.size(0) == a.size(0) && <br>
    r.size(1) == b.size(1) && <br>
    a.size(1) == b.size(0)
  </code>

*/

template <class T>
  void matmul ( const Array<T,2>&  r,
                const Array<T,2>&  a, 
                const Array<T,2>&  b );


/*!

  \brief Computes the product of two matrices.

  Computes the matrix-matrix product of the tuples \a a and \a b. The
  resulting matrix is stored in the tuple \a r. This function has the
  same semantics as the equivalent \c matmul function with three array
  arguments.

  \param r - a tuple that is set to the matrix-matrix product of \a a
  and \a b.

  \param a - a tuple representing a matrix.

  \param b - a tuple representing another matrix.

*/

template <class T, int M, int N, int P>
  inline void  matmul ( Tuple<T,M,P>&        r,
                        const Tuple<T,M,N>&  a,
                        const Tuple<T,N,P>&  b );



/*!

  \brief Computes the product of two matrices.

  Computes the matrix-matrix product of the two-dimensional arrays \a
  a and \a b. The resulting matrix is stored in the tuple \a r. This
  function has the same semantics as the equivalent \c matmul function
  with three array arguments.

  \param r - a tuple that is set to the matrix-matrix product of \a a
  and \a b.

  \param a - an array representing a matrix.

  \param b - another array.

  \pre <code>
    a.size(0) == M         && <br>
    a.size(1) == b.size(0) && <br>
    b.size(1) == P
  </code>

*/

template <class T, int M, int P>
  inline void  matmul ( Tuple<T,M,P>&      r,
                        const Array<T,2>&  a,
                        const Array<T,2>&  b );


/*!

  \brief Computes the product of two matrices.

  Computes the matrix-matrix product of the tuple \a a and the
  two-dimensional array \a b. The resulting matrix is stored in the
  two-dimensional array \a r. This function has the same semantics as
  the equivalent \c matmul function with three array arguments.

  \param r - an array that is set to the matrix-matrix product of \a a
  and \a b.

  \param a - a tuple representing a matrix.

  \param b - an array representing another matrix.

  \pre <code>
    r.size(0) == M         && <br>
    r.size(1) == b.size(1) && <br>
    b.size(0) == N
  </code>

*/

template <class T, int M, int N>
  inline void  matmul ( const Array<T,2>&    r,
                        const Tuple<T,M,N>&  a,
                        const Array<T,2>&    b );


/*!

  \brief Computes the product of two matrices.

  Computes the matrix-matrix product of the two-dimensional array \a a
  and the tuple \a b. The resulting matrix is stored in the
  two-dimensional array \a r. This function has the same semantics as
  the equivalent \c matmul function with three array arguments.

  \param r - an array that is set to the matrix-matrix product of \a a
  and \a b.

  \param a - an array representing a matrix.

  \param b - a tuple representing another matrix.

  \pre <code>
    r.size(0) == a.size(0) && <br>
    r.size(1) == P         && <br>
    a.size(1) == N
  </code>

*/

template <class T, int N, int P>
  inline void  matmul ( const Array<T,2>&    r,
                        const Array<T,2>&    a,
                        const Tuple<T,N,P>&  b );


/*!

  \brief Returns the product of two matrices.

  Returns a matrix containing the product of the matrices \a a
  and \a b.

  This function simply executes:

  \code

  Array<T,2> r ( a.size(0), b.size(1) );

  matmul ( r, a, b );
  return r;

  \endcode

  \param a - a matrix.

  \param b - another matrix.

  \pre <code> a.size(1) == b.size(0) </code>

  \return The product of \a a and \a b.

*/

template <class T>
  inline Array<T,2> matmul ( const Array<T,2>&  a, 
                             const Array<T,2>&  b );


/*!

  \brief Returns the product of two matrices.

  Returns a tuple containing the product of the tuples \a a
  and \a b.

  This function simply executes:

  \code

  Tuple<T,M,P> r;

  matmul ( r, a, b );
  return r;

  \endcode

  \param a - a tuple representing a matrix.

  \param b - a tuple representing another matrix.

  \return The product of \a a and \a b.

*/

template <class T, int M, int N, int P>
  inline Tuple<T,M,P>  matmul ( const Tuple<T,M,N>&  a,
                                const Tuple<T,N,P>&  b );


/*!

  \brief Returns the product of two matrices.

  Returns a two-dimensional array containing the product of the tuple
  \a a and the two-dimensional array \a b.

  This function simply executes:

  \code

  Array<T,2> r ( M, b.size(1) );

  matmul ( r, a, b );
  return r;

  \endcode

  \param a - a tuple representing a matrix.

  \param b - an array representing another matrix.

  \pre <code> b.size(0) == N </code>

  \return The product of \a a and \a b.

*/

template <class T, int M, int N>
  inline Array<T,2>  matmul ( const Tuple<T,M,N>&  a,
                              const Array<T,2>&    b );


/*!

  \brief Returns the product of two matrices.

  Returns a two-dimensional array containing the product of the
  two-dimensional array \a a and the tuple \a b.

  This function simply executes:

  \code

  Array<T,2> r ( a.size(0), P );

  matmul ( r, a, b );
  return r;

  \endcode

  \param a - an array representing a matrix.

  \param b - a tuple representing another matrix.

  \pre <code> a.size(1) == N </code>

  \return The product of \a a and \a b.

*/

template <class T, int N, int P>
  inline Array<T,2>  matmul ( const Array<T,2>&    a,
                              const Tuple<T,N,P>&  b );



//@}


JEM_END_PACKAGE( numeric )
