
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )


//=======================================================================
//   class Delegate
//=======================================================================

/*!
  \class Delegate Delegate.dox jem/util/event/Delegate.h

  \brief Represents a call-back function that will be invoked by an
  event.

  The \c Delegate class represents a call-back function that is
  invoked by an \c Event object. The template parameter \a Args is a
  class that bundles the arguments of an event. This parameter equals
  the \c Arguments type defined by the event to which a \c Delegate is
  connected.

  The \c Delegate class essentially provides two public functions: \c
  call() and \c isConnected(). The first is called when the
  <code>\link Event::emit() emit()\endlink</code> function is invoked
  on the event to which a delegate has been connected. The second is
  called by an \c Event to test whether a \c Delegate is still
  useable. If this function returns \c false, the \c Delegate will be
  deleted.

  If you want to implement your own delegate type, you should take the
  following steps: define a class that is derived from the \c Delegate
  class; implement the \c call() and \c isConnected() member
  functions; and implement a non-member function that creates an
  instance of your class and that connects this instance to an
  event. The following example illustrates these steps for a delegate
  type that encapsulates a call-back function with a single argument.

  \code
  template <class Args, class Func>
    class MyDelegate : public Delegate
  {
   public:

    explicit MyDelegate ( Func func ) : func_ ( func )
    {}

    virtual bool isConnected () const
    {
      return true;  // Since a function is never deleted.
    }

    virtual void call ( const Args& args )
    {
      func_ ( args.first );
    }


   private:

    Func func_;
  };

  template <class E, class F>
    void myConnect ( E& event, F func )
  {
    event.connectTo (
      new MyDelegate< typename E::Arguments, F > ( func )
    );
  }
  \endcode
  
  \sa \c Event

*/

template <class Args>
  class Delegate : public AbstractDelegate
{
 public:

//-----------------------------------------------------------------------
//   typedefs
//-----------------------------------------------------------------------

/*!

  \brief A struct that bundles the arguments of an event.

  The \c Arguments type is a simple struct that bundles the arguments
  of an event. It is an alias for the template parameter \a Args, that
  equals the \c Arguments type defined by the event to which this \c
  Delegate has been connected.

  \sa \c call()

*/

  typedef Args Arguments;


//-----------------------------------------------------------------------
//   call
//-----------------------------------------------------------------------

/*!

  \brief Invokes the call-back represented by this object.

  Invokes the call-back function represented by this \c Delegate
  object. The \c call member function by the \c emit member function of
  the \c Event class. The argument \a args is a simple struct that
  bundles the arguments of the \c emit function. This struct has the
  following members:

  \li \c ARGUMENT_COUNT - a static member of type \c const \c int that
  equals the number of arguments that were passed to the \c emit
  function.

  \li \c first - a copy of the first argument passed to the \c emit
  function. This member only exists when \c emit was called with one
  or more arguments.

  \li \c second - a copy of the second argument passed to the \c emit
  function. This member only exists when \c emit was called with two
  or more arguments.

  \li \c third - a copy of the third argument passed to the \c emit
  function. This member only exists when \c emit was called with three
  arguments.

  Note that you do not have to test explicitly whether the members \c
  first, \c second and \c third exist; the compiler will emit an error
  if you try to use a non-existing member.

  \param args - a struct bundling the arguments of the \c emit
  function of the \c Event class.

*/

  virtual void call ( const Arguments& args ) = 0;


//-----------------------------------------------------------------------
//   isConnected
//-----------------------------------------------------------------------

/*!

  \brief Tests whether the call-back represented by this object still
  exists.

  Tests whether the call-back function represented by this \c Delegate
  object still exists. If, for instance, this \c Delegate represents a
  non-static member function of some object, then this function should
  return \c false if that object has been deleted, and \c true
  otherwise.

  This function is called by an \c Event to test whether a \c Delegate
  is still useable. If this function returns \c false, then the \c
  Delegate will be deleted.

  \return \c true if the call-back represented by this object still
  exists, and \c false otherwise.

*/

  virtual bool isConnected () const = 0;


 protected:

//-----------------------------------------------------------------------
//   destructor
//-----------------------------------------------------------------------

/*!

  \brief Protected destructor.

  The destructor of the \c Delegate class is declared protected
  because only an \c Event should be able to delete an instance of the
  \c Delegate class. This is to avoid situations in which an \c
  Delegate is deleted more than once.

  Classes derived from the \c Delegate class should also declare their
  destructor protected.

*/

  virtual ~Delegate ();

};





JEM_END_PACKAGE( util )
