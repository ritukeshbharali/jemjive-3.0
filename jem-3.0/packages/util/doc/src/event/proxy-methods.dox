
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )


/*!

  \page ProxyMethods Proxy methods
  
  A proxy method is a regular function that acts as a method
  (non-static member function) of a collectable object. Proxy methods
  are useful if you need to connect an event to a method with
  incompatible arguments.
  
  Suppose, for instance, that you have two classes, named \c
  SignalSampler and \c RealTimeGraph, that are defined as follows:
  
  \code
  
  class SignalSampler : public Collectable
  {
   public:
   
    // First event argument  : time of sample.
    // Second event argument : signal level.
   
    Event<Time,double>  newSampleEvent;
    
    
    // More members ...
    
  };
  
  class RealTimeGraph : public Collectable
  {
   public:
   
    void addPoint ( double value, const Time& t );
    
    
    // More members ...
    
  };
  
  \endcode
  
  Now you want to connect the \c newSampleEvent of the \c
  SignalSampler class to the method \c addPoint of the \c
  RealTimeGraph. Unfortunately, this is not possible because the order
  of the arguments is incorrect. This problem can be solved elegantly
  by defining a proxy method that calls the \c addPoint method with
  the arguments in the correct order. The following code shows how to
  do this.
  
  \code
  
  void addPointProxy ( RealTimeGraph&  graph,
                       const Time&     t,
                       double          value )
  {
    graph.addPoint ( value, t );
  }
  
  
  int main ()
  {
    Ref<SignalSampler> sampler = newInstance<SignalSampler> ();
    Ref<RealTimeGraph> graph   = newInstance<RealTimeGraph> ();
    
    connect ( sampler->newSampleEvent,
              graph,
              & addPointProxy );
    
    // ...
    
    return 0;
  }
  
  \endcode
  
  The proxy method \c addPointProxy has three arguments. The first
  argument is a reference to the collectable object to which the \c
  newSampleEvent has been connected. The other two arguments are the
  arguments of the event. Connecting the \c newSampleEvent to the
  proxy method is similar to connecting the event to a normal method.
  
  In general, a proxy method has the following signature:
  
  <code>R proxyMethod ( T& obj, A a, B b, C c )</code>
  
  with \c R the return type (usually <code>void</code>); with \c T the
  type of the object on which the proxy method operates; and with \c
  A, \c B and \c C the argument types of the proxy method. These must
  be compatible with the argument types of the event that is connected
  to the proxy method. The number of arguments may be less than three;
  the only requirement is that the number of arguments does not exceed
  the number of arguments of the event that is connected to the proxy
  method.
  
  An event is connected to a proxy method by calling the <code>\link
  jem::util::Event::connect() connect()\endlink</code> function with
  three arguments: the event to be connected, the object on which the
  proxy is to operate, and the address of the proxy method. For
  instance, the call
  
  <code>connect ( e, obj, & proxy )</code>
  
  connects the event \c e to the proxy method \c proxy. When the event
  is emitted, the proxy method is called with the object \c obj as its
  first argument, and with the event arguments as the remaining
  arguments. If the event has more arguments than the proxy method,
  then the last few event arguments are discarded.
  
*/



JEM_END_PACKAGE( util )
