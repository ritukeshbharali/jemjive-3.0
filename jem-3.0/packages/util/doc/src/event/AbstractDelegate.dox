
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )


//=======================================================================
//   class AbstractDelegate
//=======================================================================

/*!
  \class AbstractDelegate AbstractDelegate.dox jem/util/event/AbstractDelegate.h

  \brief Provides a superclass for all delegate types.

  The \c AbstractDelegate class is the superclass of all delegate
  types. This class exists for implementation purposes only; you
  will never have to deal with this class directly. You only have to
  deal with this class indirectly when you implement your own delegate
  type.

  \sa \c Delegate, \c Event.

*/

class AbstractDelegate
{
 public:

//-----------------------------------------------------------------------
//   isConnected
//-----------------------------------------------------------------------

/*!

  \brief Tests whether the delegate represented by this instance still
  exists.

  Tests whether the delegate represented by this \c AbstractDelegate
  instance still exists.

  \return \c true if the delegate still exists, and \c false
  otherwise.

*/

  virtual bool isConnected () const = 0;


//-----------------------------------------------------------------------
//   equals
//-----------------------------------------------------------------------

/*!

  \brief Tests whether this delegate is equal to another delegate.

  Tests whether the delegate represented by this \c AbstractDelegate
  instance is equal to the delegate represented by the \c
  AbstractDelegate instance \a rhs.

  This function is primarily used to disconnect delegates from events.

  \param rhs - an \c AbstractDelegate instance.

  \return \c true if this delegate equals the delegate \a rhs, and \c
  false otherwise.

*/

  virtual bool equals ( AbstractDelegate* rhs ) const = 0;


 protected:

//-----------------------------------------------------------------------
//   destructor
//-----------------------------------------------------------------------

/*!

  \brief Protected destructor.

  The destructor of the \c AbstractDelegate class is declared
  protected because only an \c Event should be able to delete an
  instance of the \c AbstractDelegate class. This is to avoid
  situations in which an \c AbstractDelegate is deleted more than
  once.

  Classes derived from the \c AbstractDelegate class should also
  declare their destructor protected.

*/

  virtual ~AbstractDelegate ();


 private:

//-----------------------------------------------------------------------
//   disabled copy constructor & assignment operator
//----------------------------------------------------------------------- 

/*!

  \brief Disabled copy constructor.

  The copy constructor is declared private because an \c
  AbstractDelegate instance, or any instance derived from the \c
  AbstractDelegate class, should not be copied.

*/

  AbstractDelegate ( const AbstractDelegate& );


/*!

  \brief Disabled assignment operator.

  The assignment operator is declared private because an \c
  AbstractDelegate object should not be copied.

*/

  AbstractDelegate& operator = ( const AbstractDelegate& );

};



JEM_END_PACKAGE( util )


