
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )

  
//=======================================================================
//   class FastAllocator
//=======================================================================

/*!  
  \class FastAllocator FastAllocator.dox jem/util/FastAllocator.h

  \brief Implements a memory allocation algorithm that favors speed
  above fair memory use.
   
  Like the other allocator classes, the \c FastAllocator class can be
  used to allocate equally-sized chunks of memory. It is the fastest
  allocator class because it does not free memory until its destructor
  is called. Use this allocator when you need performance and the
  total number of allocated memory chunks does not vary too much in
  time.

  \sa \c StandardAllocator, \c MallocAllocator.

*/

class FastAllocator
{
 public:
  
//-----------------------------------------------------------------------
//   constructor & destructor
//-----------------------------------------------------------------------

/*! 

  \brief Creates a new allocator instance.
   
  Creates a \c FastAllocator object that allocates memory chunks of \a
  itemSize bytes.

  \param itemSize - the size in bytes of the memory chunks to be
  allocated by this \c FastAllocator.

  \pre <code>itemSize > 0</code>

*/

  explicit FastAllocator ( size_t itemSize );


/*! 

  \brief Frees all allocated memory.

  Frees the memory that has been allocated by this \c FastAllocator
  object.
  
  \warning The lifetime of this allocator should exceed the lifetime
  of all the memory chunks that have been allocated by this allocator.

*/

  ~FastAllocator ();


//-----------------------------------------------------------------------
//   alloc
//-----------------------------------------------------------------------

/*! 

  \brief Allocates a new memory chunk.
  
  Allocates a memory chunk of size equal to the argument passed to the
  constructor of this \c FastAllocator object.
  
  \return A pointer to a newly allocated memory chunk.

  \throws OutOfMemoryException - if there is no more memory available.

*/

  inline void* alloc ();


//-----------------------------------------------------------------------
//   dealloc
//-----------------------------------------------------------------------

/*! 

  \brief Deallocates a memory chunk.
  
  Deallocates the memory chunk pointed to by the pointer \a p. This
  chunk must have been allocated by a call to the \c alloc() member
  function.

  The \c FastAllocator class does not actually free the memory chunk,
  but marks it as not being used, so that it can be used again when \c
  alloc() is called.

  \param p - a pointer to the memory chunk to be deallocated.

  \pre The memory chunk pointed to by \a p has been allocated by the
  member function \c alloc().

*/

  inline void dealloc ( void* p );


//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \brief Interchanges the internal state of two allocators.
   
  Interchanges the internal state of this allocator with the \a rhs
  allocator. After calling this function, you must invoke the \c
  dealloc() function on the \a rhs allocator to deallocate all memory
  chunks that have been obtained by invoking the \c alloc() function
  on this allocator, and the other way around.

  \param rhs - a \c FastAllocator instance.

  \sa \c StdAllocator::swap().

*/

  void swap ( FastAllocator& rhs );

};


//=======================================================================
//   related functions
//=======================================================================

//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!
  
  \relates FastAllocator

  \brief Interchanges two allocator instances.

  This function is equivalent with:

  <code>lhs.swap( rhs )</code>

*/

inline void swap ( FastAllocator& lhs, FastAllocator& rhs );



JEM_END_PACKAGE( util )
