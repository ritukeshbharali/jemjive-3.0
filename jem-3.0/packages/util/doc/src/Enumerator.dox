
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )


//=======================================================================
//   class Enumerator
//=======================================================================

/*!

  \brief Iterates over a set of objects.

  <code>\#include <jem/util/Enumerator.h></code>

  The abstract class \c Enumerator can be used to iterate over a
  collection of objects. An \c Enumerator can be viewed as a type of
  forward iterator with virtual member functions.

  An \c Enumerator either points to an object in a collection, or to a
  special <em>end object</em> that is located one position past the
  last object in the collection. The member function \c atEnd() can be
  used to check whether an enumerator points to a regular object or to
  an end object. Note that end objects can not be accessed; they are
  conceptual objects that are not physically stored in memory.

  The following code fragment demonstrates how the \c Enumerator class
  is typically used.

  \code

  void print ( io::Writer& out, Enumerable& collection )
  {
    Ref<Enumerator> e = collection.getEnumerator ();

    for ( ; ! e->atEnd(); e->toNext() )
    {
      out << e->get()->toString();
    }
  }

  \endcode

  \sa \c Enumerable

*/

class Enumerator : public Object
{
 public:

  static  Class* makeClass ();
  static  Class* getType   ();
  virtual Class* getClass  () const;


//-----------------------------------------------------------------------
//   atEnd
//-----------------------------------------------------------------------

/*!

  \brief Checks whether this enumerator points to an end object.

  Checks whether this enumerator points to an end object that marks
  the end of an object collection.
  
  \return \c true if this enumerator points to an end object, or \c
  false otherwise.

*/

  virtual bool atEnd  () const = 0;


//-----------------------------------------------------------------------
//   toNext
//-----------------------------------------------------------------------

/*!

  \brief Advances this enumerator to the next object.

  Advances this enumerator to the next object in the collection, or to
  the end object if there is no next object. This function may not be
  called if this enumerator already points to the end object.

  \pre <code>this->atEnd() == false</code>

*/

  virtual void toNext () = 0;


//-----------------------------------------------------------------------
//   get
//-----------------------------------------------------------------------

/*!

  \brief Returns the current object.

  Returns a reference to the object that this enumerator is currently
  pointing to. This function may not be called if this enumerator is
  pointing to an end object.

  \pre <code>this->atEnd() == false</code>

  \return A reference to the current object.

*/

  virtual Ref<Object> get () const = 0;


 protected:

  virtual ~Enumerator ();

};




JEM_END_PACKAGE( util )
