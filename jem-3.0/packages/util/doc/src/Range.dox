
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */

#ifndef JEM_UTIL_RANGE_H
#define JEM_UTIL_RANGE_H

#include <jem/base/TypeTraits.h>


JEM_BEGIN_PACKAGE( util )


//-----------------------------------------------------------------------
//   class Range
//-----------------------------------------------------------------------

/*!

  \class Range Range.dox jem/util/Range.h

*/

template <class T>

  class Range

{
 public:

  inline                  Range     ();

  inline                  Range

    ( T                     first,
      T                     last );

  inline                  Range

    ( const Range&          rhs );

  inline bool             isEmpty   () const;
  inline bool             notEmpty  () const;

  inline Range&           operator  +=

    ( T                     rhs );

  inline Range&           operator  -=

    ( T                     rhs );

  inline Range&           operator  &=

    ( const Range&          rhs );

  inline Range&           operator  |=

    ( const Range&          rhs );


 public:

  T                       first;
  T                       last;

};


//-----------------------------------------------------------------------
//   related functions
//-----------------------------------------------------------------------

/*!

  \relates Range

*/

template <class Input, class T>

  inline void             decode

  ( Input&                  in,
    Range<T>&               rn );

/*!

  \relates Range

*/

template <class Output, class T>

  inline void             encode

  ( Output&                 out,
    const Range<T>&         rn );

/*!

  \relates Range

*/

template <class Output, class T>

  inline void             print

  ( Output&                 out,
    const Range<T>&         rn );

/*!

  \relates Range

*/

template <class T>

  inline Range<T>         operator +

  ( const Range<T>&         lhs,
    T                       rhs );

/*!

  \relates Range

*/

template <class T>

  inline Range<T>         operator -

  ( const Range<T>&         lhs,
    T                       rhs );

/*!

  \relates Range

*/

template <class T>

  inline Range<T>         operator &

  ( const Range<T>&         lhs,
    const Range<T>&         rhs );

/*!

  \relates Range

*/

template <class T>

  inline Range<T>         operator |

  ( const Range<T>&         lhs,
    const Range<T>&         rhs );

/*!

  \relates Range

*/

template <class T>

  inline bool             overlap

  ( const Range<T>&         lhs,
    const Range<T>&         rhs );

/*!

  \relates Range

*/

template <class T>

  inline Range<T>         range

  ( T                       first,
    T                       last );



JEM_END_PACKAGE( util )

#endif
