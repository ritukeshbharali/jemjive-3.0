
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )


//=======================================================================
//   class DictionaryEnumerator
//=======================================================================

/*!
  \class DictionaryEnumerator DictionaryEnumerator.dox jem/util/DictionaryEnumerator.h
  
  \brief Iterates over the key/value pairs in a dictionary.

  The abstract class \c DictionaryEnumerator can be used to iterate
  over all key/value pairs in a \c Dictionary. It extends the \c
  Enumerator class with the member functions \c getKey() and \c
  getValue() that return the key and value, respectively, in a
  key/value pair.

  A \c DictionaryEnumerator points either to a key/value pair or to an
  end object that comes right after the last key/value pair. An end
  object is a conceptual object that can not be accessed. Only the
  function \c atEnd() may be called when a \c DictionaryEnumerator
  points to an end object.

  \sa \c Dictionary

*/


class DictionaryEnumerator :  public Enumerator
{
 public:
  
  typedef Enumerator              Super;
  typedef DictionaryEnumerator    Self;
  
  
  static  Class*  makeClass ();
  static  Class*  getType   ();
  virtual Class*  getClass  () const;


//-----------------------------------------------------------------------
//   get
//-----------------------------------------------------------------------

/*!

  \brief Returns the current key/value pair as an object.

  Returns an object containing the key/value pair that this enumerator
  is currently pointing to. The dynamic type of the returned object is
  not specified. The only requirement is that the returned object can
  be passed to the function <code> \link Dictionary::add() add()
  \endlink </code> of the dictionary that created this enumerator.

  The implementation of this function provided by the \c
  DictionaryEnumerator return the key/value pair as an \c
  ObjectPair. That is, it executes the following code:

  \code

  return newInstance<ObjectPair> (
    toObject ( getKey() ),
    getValue ()
  );

  \endcode

  This function may not be called when this enumerator points to the
  end object.

  \pre <code>atEnd() == false</code>

  \return An object containing the current key/value pair.

*/

  virtual Ref<Object> get () const; 
  

//-----------------------------------------------------------------------
//   getKey
//-----------------------------------------------------------------------

/*!

  \brief Returns the key in the current key/value pair.

  Returns the key in the current key/value pair. This function may not
  be called when this enumerator points to the end object.

  \pre <code>atEnd() == false</code>

  \return The key in the current key/value pair.

*/

  virtual String getKey () const = 0;


//-----------------------------------------------------------------------
//   getValue
//-----------------------------------------------------------------------

/*!

  \brief Returns the value in the current key/value pair.

  Returns a reference to the value in the current key/value pair. This
  function may not be called when this enumerator points to the end
  object.

  \pre <code>atEnd() == fale</code>

  \return A reference to the value in the current key/value pair.

*/

  virtual Ref<Object>  getValue () const = 0;
  
  
 protected:           
  
  virtual              ~DictionaryEnumerator ();

};





JEM_END_PACKAGE( util )
