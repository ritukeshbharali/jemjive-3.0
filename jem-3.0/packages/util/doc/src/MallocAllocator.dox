
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )

  
//=======================================================================
//   class MallocAllocator
//=======================================================================

/*!  
  \class MallocAllocator MallocAllocator.dox jem/util/MallocAllocator.h

  \brief Allocates memory chunks by calling the standard malloc
  function.
  
  The \c MallocAllocator class can be used to allocate equally-sized
  chunks of memory. It is not particularly fast because it simply
  calls the standard C library function \c malloc() to allocate each
  memory chunk. Use this allocator class if you have a special
  implementation of \c malloc() that you want to use.

  \sa \c StandardAllocator, \c FastAllocator.

*/

class MallocAllocator
{
 public:
  
//-----------------------------------------------------------------------
//   constructor & destructor
//-----------------------------------------------------------------------

/*! 

  \brief Creates a new allocator instance.
   
  Creates a \c MallocAllocator object that allocates memory chunks of
  \a itemSize bytes.

  \param itemSize - the size in bytes of the memory chunks to be
  allocated.

  \pre <code>itemSize > 0</code>

*/

  explicit MallocAllocator ( size_t itemSize );
  

/*! 

  \brief Destroys this allocator instance.

  This destructor does nothing since the \c MallocAllocator does not
  maintain any internal state.

*/

  ~MallocAllocator ();


//-----------------------------------------------------------------------
//   alloc
//-----------------------------------------------------------------------

/*! 

  \brief Allocates a new memory chunk.
  
  Allocates a memory chunk of size equal to the argument passed to the
  constructor of this \c MallocAllocator object. This member function
  simply calls the standard C library function \c malloc() to allocate
  the memory chunk.
  
  \return A pointer to a newly allocated memory chunk.

  \throw OutOfMemoryException - if no more memory is available.

*/

  void* alloc ();


//-----------------------------------------------------------------------
//   dealloc
//-----------------------------------------------------------------------

/*! 

  \brief Deallocates a memory chunk.
  
  Deallocates the memory chunk pointed to by the pointer \a p. This
  chunk must have been allocated by a call to the \c alloc() member
  function.

  \param p - a pointer to the memory chunk to be deallocated.

  \pre The memory chunk pointed to by \a p has been allocated by the
  member function \c alloc().
  

*/

  void dealloc ( void* p );


//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \brief Interchanges the internal state of allocators.
   
  Interchanges the internal state of this allocator with the \a rhs
  allocator. After calling this function, you must invoke the \c
  dealloc() function on the \a rhs allocator to deallocate all memory
  chunks that have been obtained by invoking the \c alloc() function
  on this allocator, and the other way around.

  \param rhs - a \c FastAllocator instance.

  \sa \c StdAllocator::swap().

*/

  void swap ( MallocAllocator& rhs );

};


//=======================================================================
//   related functions
//=======================================================================

//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \relates MallocAllocator

  \brief Interchanges two allocators.

  This function is equivalent with

  <code>lhs.swap( rhs )</code>

*/

inline void swap ( MallocAllocator& lhs, MallocAllocator& rhs );



JEM_END_PACKAGE( util )
