
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )


//=======================================================================
//   class HashDictionary
//=======================================================================

/*!
  \class HashDictionary HashDictionary.dox jem/util/HashDictionary.h

  \brief Implements a dictionary based on a hash table.

  The \c HashDictionary class uses a hash table to implement the
  interface defined by the \c Dictionary class. It has two important
  properties. First, the time it takes to insert or to find a
  key/value pair does not -- on average -- depend on the total number
  key/value pairs. Second, the order of a \c HashDictionary is not
  defined. That is, an enumerator returned by a \c HashDictionary
  iterates over the key/value pairs in a arbitrary order.

  Reading from a \c HashDictionary is thread safe. To be precise, the
  following functions may be called by multiple threads concurrently:
  \c enumerate(), \c getDictEnumerator(), \c find() and \c size().
  %All other functions are not thread safe.

*/

class HashDictionary : public Dictionary,
                       public Clonable,
                       public io::Serializable
{
 public:

  typedef Dictionary      Super;
  typedef HashDictionary  Self;
  

//-----------------------------------------------------------------------
//   constructor
//-----------------------------------------------------------------------

/*!

  \brief Constructs an empty hash dictionary.

  Constructs an empty \c HashDictionary.

  \post <code>size() == 0</code>

*/

  HashDictionary ();

  
  static  Class*          makeClass ();
  static  Class*          getType   ();
  virtual Class*          getClass  () const;

  virtual void            readFrom ( io::ObjectInput&  in );
  virtual void            writeTo  ( io::ObjectOutput& out ) const;
  
  virtual Ref<Object>     clone () const;

  virtual Ref<DictionaryEnumerator>
                          getDictEnumerator () const;
  
  virtual bool            find   ( Ref<Object>&       value,
                                   const String&      key ) const;
  
  virtual void            insert ( const String&      key,
                                   const Ref<Object>& value );

  virtual void            erase  ( const String&      key );
  virtual void            clear  ();


//-----------------------------------------------------------------------
//   reserve
//-----------------------------------------------------------------------

/*!

  \brief Expands the hash table for additional key/value pairs.

  Expands the internal hash table and pre-allocates memory for
  additional key/value pairs. The input arguments \a n specifies the
  total number of key/value pairs that will be stored in this
  dictionary. This function speeds up subsequent calls to the member
  functions \c insert() and \c add().

  Note that the internal hash table of this dictionary is resized
  automatically when needed, even if this function is not called. By
  calling this function, however, you can reduce the number of times
  that the hash table has to be resized.

  This function may not be called if an enumerator points to this
  collection.

*/

  virtual void reserve ( int n );


//-----------------------------------------------------------------------
//   trimToSize
//-----------------------------------------------------------------------

/*!

  \brief De-allocates non-used memory.

  De-allocates non-used memory and shrinks the internal hash table if
  possible.

  This function may not be called if an enumerator points to this
  collection.

*/

  virtual void trimToSize ();
  

//-----------------------------------------------------------------------
//   capacity
//-----------------------------------------------------------------------

/*!

  \brief Returns the capacity of this dictionary.

  Returns the number of key/value pairs that this dictionary can
  contain without having to expand its internal data structures.

*/

  virtual int capacity () const;


  virtual int size () const;

  
 protected:
   
  virtual    ~HashDictionary();
  
};




JEM_END_PACKAGE( util )

