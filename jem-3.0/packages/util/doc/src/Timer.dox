
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )
  

//=======================================================================
//   class Timer
//=======================================================================

/*!
  \class Timer Timer.dox jem/util/Timer.h

  \brief Measures the elapsed wall-clock time.
   
  The class \c Timer can be used to measure the duration of an event
  in terms of the elapsed wall-clock time. A \c Timer has two states:
  a \em running state, during which its internal clock is ticking, and
  a \em stopped state, during which its internal clock is stopped.
   
  \sa \c Time, \c CPUTimer.

*/

class Timer
{
 public:

//-----------------------------------------------------------------------
//   constructor
//-----------------------------------------------------------------------

/*! 

  \brief Creates a new timer.
   
  Creates a \c Timer in the \em stopped state with the elapsed time
  initialized to zero.

  \post <code>this->isRunnable() == true</code>

*/
  
  Timer ();
  

//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \brief Interchanges the internal state of two timers.
   
  Interchanges the internal state of this timer with that of the \a
  rhs timer.

  \param rhs - a \c Timer object.

*/

  void swap ( Timer& rhs );


//-----------------------------------------------------------------------
//   time
//-----------------------------------------------------------------------

/*!

  \brief Returns the elapsed wall-clock time.

  Returns a \c Time object representing the wall-clock time that has
  elapsed while this timer has been in the \em running state. The
  current state of this timer is not affected by this function.

  \return A \c Time object representing the elapsed wall-clock time.

*/

  Time time () const;


//-----------------------------------------------------------------------
//   toDouble
//-----------------------------------------------------------------------

/*!

  \brief Returns the elapsed wall-clock time in seconds as a double.
   
  Returns the elapsed wall-clock time in seconds as a double precision
  number. The current state of this timer is not affected by this
  function.

  \return <code>this->time().toDouble()</code>

*/

  double toDouble () const;


//-----------------------------------------------------------------------
//   start
//-----------------------------------------------------------------------

/*!

  \brief Starts this timer.
   
  Switches this timer to the running state. If it was already in the
  running state, this functions does nothing.

  \post <code>this->isRunning() == true</code>

*/

  void start ();


//-----------------------------------------------------------------------
//   stop
//-----------------------------------------------------------------------

/*!

  \brief Stops this timer.
   
  Switches this timer to the stopped state. If it was already in the
  stopped state, this function does nothing. Note that the measured
  wall-clock time so far is not reset.

  \post <code>this->isRunning() == false</code>

*/

  void stop ();


//-----------------------------------------------------------------------
//   reset
//-----------------------------------------------------------------------

/*!

  \brief Sets the elapsed wall-clock time to zero.
   
  Sets the elapsed wall-clock time to zero. Calling this function does
  not affect the state of this timer.

*/

  void reset ();


//-----------------------------------------------------------------------
//   isRunning
//-----------------------------------------------------------------------

/*!

  \brief Tests whether this timer is in the running state.

  Tests whether this timer is in the running state. Calling this
  function does not affect the state of this timer.

  \return \c true if this timer is in the \em running state, and \c
  false otherwise.

*/

  bool isRunning () const;


//-----------------------------------------------------------------------
//   resolution
//-----------------------------------------------------------------------

/*!

  \brief Returns the resolution of a timer.
  
  Returns the resolution of a timer.

  \return A \c Time instance representing the resolution of a \c
  Timer.

*/

  static Time resolution ();

};


//=======================================================================
//   related functions
//=======================================================================

//-----------------------------------------------------------------------
//   input & output operators
//-----------------------------------------------------------------------

/*!

  \relates Timer

  \brief De-serialization operator.
  
  Restores the state of the timer \a t from the data input stream \a
  in.

  \param in - a data input stream.

  \param t - the \c Timer to be read from the input stream.

  \return \a in.

  \throws IOException - if an I/O error occurs.

*/

inline io::DataInput& operator >>

  ( io::DataInput&  in,
    Timer&          t );


/*!

  \relates Timer

  \brief Serialization operator.

  Writes the state of the imer \a t to the data output stream \a
  out. The state of the timer can be restored at a later time by
  calling the de-serialization operator.

  \param out - data output stream.

  \param t - the \c Timer to be written to the output stream.

  \return \a out.

  \throws IOException - if an I/O error occurs.

*/

inline io::DataOutput& operator <<

  ( io::DataOutput&  out,
    const Timer&     t );


/*!

  \relates Timer

  \brief Print operator.
  
  Prints the elapsed wall-clock time measured by the timer \a t to the
  text output stream \a out.

  \param out - a text output stream.

  \param t - the \c Timer to be printed.
  
  \return \a out.

  \throws IOException - if an I/O error occurs.

*/

io::TextOutput& operator <<

  ( io::TextOutput&  out,
    const Timer&     t );


//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \relates Timer

  \brief Interchanges two timers.

  This function is equivalent with:

  <code>lhs.swap( rhs )</code>

  \param lhs - a \c Timer instance.

  \param rhs - another \c Timer instance.

*/

inline void swap ( Timer& lhs, Timer& rhs );



JEM_END_PACKAGE( util )
