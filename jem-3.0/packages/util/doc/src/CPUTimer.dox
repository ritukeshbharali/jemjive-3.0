
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )
  

//=======================================================================
//   class CPUTimer
//=======================================================================

/*!
  \class CPUTimer CPUTimer.dox jem/util/CPUTimer.h

  \brief Measures the elapsed CPU time.
   
  The class \c CPUTimer can be used to measure the duration of an event
  in terms of the elapsed CPU time. That is, the time that the CPU has
  executed on behalf of this process or thread. Since the CPU may be
  executing multiple processes or threads concurrently, the elapsed
  CPU time may be less than the elapsed wall-clock time.

  Like the \c Timer class, a \c CPUTimer has two states: a \em running
  state, during which its internal clock is ticking, and a \em stopped
  state, during which its internal clock is stopped.
   
  \sa \c Time, \c Timer.

*/

class CPUTimer
{
 public:

//-----------------------------------------------------------------------
//   constructor
//-----------------------------------------------------------------------

/*! 

  \brief Creates a new CPU timer.
   
  Creates a \c CPUTimer in the \em stopped state with the elapsed time
  initialized to zero.

  \post <code>thic->isRunning() == false</code>

*/

  CPUTimer ();


//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \brief Interchanges the internal state of two timer instances.
   
  Interchanges the internal state of this timer with that of the \a
  rhs timer.

  \param rhs - a \c CPUTimer instance.

*/

  void swap ( CPUTimer& rhs );

   
//-----------------------------------------------------------------------
//   time
//-----------------------------------------------------------------------

/*!

  \brief Returns the elapsed CPU time.

  Returns a \c Time object representing the CPU time that has elapsed
  while this timer has been in the \em running state. The
  current state of this timer is not affected by this function.

  \return A \c Time object representing the elapsed CPU time.

*/

  Time time () const;


//-----------------------------------------------------------------------
//   toDouble
//-----------------------------------------------------------------------

/*!

  \brief Returns the elapsed CPU time in seconds as a double.
   
  Returns the elapsed CPU time in seconds as a double precision
  number. The current state of this timer is not affected by this
  function.

  \return <code>this->time().toDouble()</code>

*/

  double toDouble () const;


//-----------------------------------------------------------------------
//   start
//-----------------------------------------------------------------------

/*!

  \brief Starts this timer.
   
  Switches this timer to the running state. If it was already in
  the running state, this functions does nothing.

  \post <code>this->isRunning() == true</code>

*/

  void start ();


//-----------------------------------------------------------------------
//   stop
//-----------------------------------------------------------------------

/*!

  \brief Stops this timer.
   
  Switches this timer to the stopped state. If it was already in
  the stopped state, this function does nothing. Note that the
  measured CPU time so far is not reset.

  \post <code>this->isRunning() == false</code>

*/

  void stop ();


//-----------------------------------------------------------------------
//   reset
//-----------------------------------------------------------------------

/*!

  \brief Sets the elapsed CPU time to zero.
   
  Sets the elapsed CPU time to zero. Calling this function does not
  affect the state of this \c CPUTimer.

  \post <code>this->time() == Time::zero()</code>

*/

  void reset ();


//-----------------------------------------------------------------------
//   isRunning
//-----------------------------------------------------------------------

/*!

  \brief Tests whether this timer is in the running state.
   
  Tests whether this timer is in the running state. Calling this
  function does not affect the state of this timer.

  \return \c true if this timer is in the \em running state, and \c
  false otherwise.

*/

  bool isRunning () const;


//-----------------------------------------------------------------------
//   resolution
//-----------------------------------------------------------------------

/*!

  \brief Returns the resolution of a CPU timer.
  
  Returns the resolution of a CPU timer.

  \return A \c Time object representing the resolution of a \c
  CPUTimer.

*/

  static Time resolution ();


};

//=======================================================================
//   related functions
//=======================================================================

//-----------------------------------------------------------------------
//   input & output operators
//-----------------------------------------------------------------------

/*!

  \relates CPUTimer

  \brief De-serialization operator.
  
  Restores the state of the CPU timer \a t from the data input
  stream \a in.

  \param in - a data input stream.

  \param t - the \c CPUTimer to be read from the input stream.

  \return \a in.

  \throws IOException - if an I/O error occurs.

*/

inline io::DataInput& operator> > ( io::DataInput&  in,
                                    CPUTimer&       t );


/*!

  \relates CPUTimer

  \brief Serialization operator.
   
  Writes the state of the CPU timer \a t to the data output stream \a
  out. The state of the timer can be restored at a later time by
  calling the de-serialization operator.

  \param out - data output stream.

  \param t - the \c CPUTimer to be written to the output stream.

  \return \a out.

  \throws IOException - if an I/O error occurs.

*/

inline io::DataOutput& operator << ( io::DataOutput& out,
                                     const CPUTimer& t );


/*!

  \relates CPUTimer

  \brief Print operator.
  
  Prints the elapsed CPU time measured by the CPU timer \a t to the
  text output stream \a out.

  \param out - a text output stream.

  \param t - the \c CPUTimer to be printed.
  
  \return \a out.

  \throws IOException - if an I/O error occurs.

*/

io::TextOutput& operator << ( io::TextOutput& out,
                              const CPUTimer& t );


//-----------------------------------------------------------------------
//   swap
//-----------------------------------------------------------------------

/*!

  \relates CPUTimer

  \brief Interchanges two CPU timers.

  This function is equivalent with:

  <code>lhs.swap( rhs )</code>

  \param lhs - a \c CPUTimer instance.

  \param rhs - another \c CPUTimer instance.

*/

inline void swap ( CPUTimer& lhs, CPUTimer& rhs );



JEM_END_PACKAGE( util )
