
/*
 *  Copyright (C) 2019 DRG. All rights reserved.
 *
 *  This file is part of Jem, a general purpose programming toolkit.
 *
 *  Commercial License Usage
 *
 *  This file may be used under the terms of a commercial license
 *  provided with the software, or under the terms contained in a written
 *  agreement between you and DRG. For more information contact DRG at
 *  http://www.dynaflow.com.
 *
 *  GNU Lesser General Public License Usage
 *
 *  Alternatively, this file may be used under the terms of the GNU
 *  Lesser General Public License version 2.1 or version 3 as published
 *  by the Free Software Foundation and appearing in the file
 *  LICENSE.LGPLv21 and LICENSE.LGPLv3 included in the packaging of this
 *  file. Please review the following information to ensure the GNU
 *  Lesser General Public License requirements will be met:
 *  https://www.gnu.org/licenses/lgpl.html and
 *  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 *
 *  Jem version: 3.0
 *  Date:        Fri 20 Dec 14:27:58 CET 2019
 */


#include <jem/defines.h>


JEM_BEGIN_PACKAGE( util )

  
//=======================================================================
//   class Barrier
//=======================================================================

/*!
  \class Barrier Barrier.dox jem/util/Barrier.h

  \brief Synchronizes a group of threads.
  
  The \c Barrier class can be used to synchronize a group of
  threads. It provides a member function, named \c wait(), that
  suspends the calling thread. The threads are resumed when the last
  thread in the group calls the \c wait() member function.

  \sa \c Thread, \c Mutex, \c Monitor.

*/

class Barrier
{
 public:

//-----------------------------------------------------------------------
//   constants
//-----------------------------------------------------------------------

/*!

  \brief An integer constant that is returned by \c wait().

  An integer constant that is returned by the \c wait() member
  function when it is called by the last thread in the group of
  threads that synchronizes on this \c Barrier object.

*/

  static const int LAST_THREAD;


//-----------------------------------------------------------------------
//   constructors & destructor
//-----------------------------------------------------------------------

/*!

  \brief Constructs a new barrier instance.
   
  Constructs a \c Barrier object that can be used to synchronize \a n
  threads.

  \param n - the number of threads that will synchronize on this \c
  Barrier object.

  \pre <code>n > 0</code>

  \post <code>this->size() == n</code>

*/

  explicit Barrier ( int n );


/*! 

  \brief Destroys this barrier instance.

  Destroys this \c Barrier object. Suspended threads (that have called
  the member function wait) will \e not (and thus \e never) be
  resumed.

*/

  ~Barrier ();


//-----------------------------------------------------------------------
//   wait
//-----------------------------------------------------------------------

/*! 

  \brief Suspends the current thread until the last thread has called
  this function.
  
  If <i>n</i> is the size of this \c Barrier, then the first <i>(n -
  1)</i> threads calling this member function will be suspended. They
  will be resumed when the <i>n</i>-th thread calls this function. The
  <i>n</i>-th call of this function also resets this \c Barrier object
  so that it can be used to synchronize the next \a n threads calling
  this function.

  \return \c LAST_THREAD when this member is called by the last thread
  (the <i>n</i>-th thread). Else, an integer different from \c
  LAST_THREAD is returned.

  \throws CancelledException - when a suspended thread is
  cancelled. Note that cancelling a suspended thread will not affect
  the normal operation of a \c Barrier object. That is, all suspended
  threads will be resumed by the last thread calling the wait
  function, even if one of the suspended threads is cancelled.

*/

  int wait ();


//-----------------------------------------------------------------------
//   size
//-----------------------------------------------------------------------

/*! 
 
  \brief Returns the number of threads that synchronize on this
  barrier.

  Returns the number of threads that synchronize on this \c Barrier
  object.

  \return The number of threads that synchronize on this barrier.

*/

  inline int size () const;

};



JEM_END_PACKAGE( util )
